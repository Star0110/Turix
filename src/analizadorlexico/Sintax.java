
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Aug 31 21:25:35 CST 2025
//----------------------------------------------------

package analizadorlexico;

import java_cup.runtime.Symbol;
import analizadorlexico.Errores;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Aug 31 21:25:35 CST 2025
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\007\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\004\000\002\004\005" +
    "\000\002\004\006\000\002\004\011\000\002\004\011\000" +
    "\002\004\011\000\002\004\011\000\002\004\012\000\002" +
    "\004\010\000\002\004\007\000\002\004\007\000\002\004" +
    "\007\000\002\004\010\000\002\004\005\000\002\004\006" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\010\000\002\004\005\000\002" +
    "\004\006\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\010\000\002\004\010\000\002\004\011" +
    "\000\002\004\011\000\002\004\011\000\002\004\011\000" +
    "\002\004\011\000\002\004\011\000\002\004\012\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\004" +
    "\010\000\002\004\007\000\002\004\007\000\002\004\007" +
    "\000\002\004\010\000\002\014\003\000\002\014\005\000" +
    "\002\015\010\000\002\015\010\000\002\015\010\000\002" +
    "\015\010\000\002\016\006\000\002\016\006\000\002\016" +
    "\004\000\002\017\003\000\002\017\003\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\003\000\002\006\013" +
    "\000\002\006\013\000\002\006\013\000\002\006\013\000" +
    "\002\012\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\006\000\002\012\007\000\002\007" +
    "\020\000\002\010\013\000\002\011\013\000\002\013\012" +
    "\000\002\013\011\000\002\005\004\000\002\005\004\000" +
    "\002\021\006\000\002\021\006\000\002\023\003\000\002" +
    "\023\005\000\002\024\003\000\002\024\005\000\002\025" +
    "\010\000\002\025\011\000\002\025\006\000\002\025\006" +
    "\000\002\025\007\000\002\025\010\000\002\025\006\000" +
    "\002\025\006\000\002\025\005\000\002\026\007\000\002" +
    "\026\007\000\002\027\005\000\002\027\005\000\002\027" +
    "\007\000\002\027\005\000\002\022\003\000\002\022\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\004\025\005\001\002\000\004\002\u0147\001" +
    "\002\000\006\003\007\011\006\001\002\000\004\004\u0140" +
    "\001\002\000\004\004\010\001\002\000\024\003\027\017" +
    "\021\020\016\021\025\023\031\027\014\031\012\032\026" +
    "\044\030\001\002\000\020\012\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\027\ufff5\031\ufff5\032\ufff5\001\002\000\004\007\u0138" +
    "\001\002\000\020\012\ufff3\017\ufff3\020\ufff3\021\ufff3\027" +
    "\ufff3\031\ufff3\032\ufff3\001\002\000\004\007\u011b\001\002" +
    "\000\020\012\ufffb\017\ufffb\020\ufffb\021\ufffb\027\ufffb\031" +
    "\ufffb\032\ufffb\001\002\000\006\003\344\044\345\001\002" +
    "\000\020\012\ufff1\017\ufff1\020\ufff1\021\ufff1\027\ufff1\031" +
    "\ufff1\032\ufff1\001\002\000\020\012\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\027\ufff2\031\ufff2\032\ufff2\001\002\000\006\003" +
    "\302\044\303\001\002\000\020\012\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\027\ufff7\031\ufff7\032\ufff7\001\002\000\020\012" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\027\ufff9\031\ufff9\032\ufff9" +
    "\001\002\000\020\012\300\017\021\020\016\021\025\027" +
    "\014\031\012\032\026\001\002\000\006\003\257\044\260" +
    "\001\002\000\004\007\205\001\002\000\004\004\204\001" +
    "\002\000\010\013\105\033\106\041\104\001\002\000\004" +
    "\007\032\001\002\000\014\006\035\007\034\011\036\044" +
    "\041\045\033\001\002\000\024\003\uffbd\004\uffbd\010\uffbd" +
    "\012\uffbd\014\uffbd\015\uffbd\034\uffbd\035\uffbd\036\uffbd\001" +
    "\002\000\014\003\077\007\034\011\036\044\056\045\033" +
    "\001\002\000\004\044\072\001\002\000\014\003\065\007" +
    "\034\011\036\044\056\045\033\001\002\000\024\003\uffaf" +
    "\004\uffaf\010\uffaf\012\uffaf\014\uffaf\015\uffaf\034\uffaf\035" +
    "\uffaf\036\uffaf\001\002\000\012\010\063\034\052\035\051" +
    "\036\053\001\002\000\014\010\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\043\045\001\002\000\004\010\043\001\002\000\004" +
    "\004\044\001\002\000\020\012\uff8e\017\uff8e\020\uff8e\021" +
    "\uff8e\027\uff8e\031\uff8e\032\uff8e\001\002\000\014\006\035" +
    "\007\034\011\036\044\041\045\033\001\002\000\012\010" +
    "\uff88\034\052\035\051\036\053\001\002\000\004\010\uff89" +
    "\001\002\000\004\010\uff87\001\002\000\014\003\061\007" +
    "\034\011\036\044\056\045\033\001\002\000\014\003\057" +
    "\007\034\011\036\044\056\045\033\001\002\000\014\003" +
    "\054\007\034\011\036\044\056\045\033\001\002\000\024" +
    "\003\uffb6\004\uffb6\010\uffb6\012\uffb6\014\uffb6\015\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\001\002\000\024\003\uffb7\004\uffb7" +
    "\010\uffb7\012\uffb7\014\uffb7\015\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\001\002\000\024\003\uffbc\004\uffbc\010\uffbc\012\uffbc" +
    "\014\uffbc\015\uffbc\034\uffbc\035\uffbc\036\uffbc\001\002\000" +
    "\024\003\uffba\004\uffba\010\uffba\012\uffba\014\uffba\015\uffba" +
    "\034\uffba\035\uffba\036\uffba\001\002\000\024\003\uffbb\004" +
    "\uffbb\010\uffbb\012\uffbb\014\uffbb\015\uffbb\034\uffbb\035\uffbb" +
    "\036\053\001\002\000\024\003\uffb8\004\uffb8\010\uffb8\012" +
    "\uffb8\014\uffb8\015\uffb8\034\uffb8\035\uffb8\036\uffb8\001\002" +
    "\000\024\003\uffb9\004\uffb9\010\uffb9\012\uffb9\014\uffb9\015" +
    "\uffb9\034\uffb9\035\uffb9\036\053\001\002\000\004\004\064" +
    "\001\002\000\020\012\uff8d\017\uff8d\020\uff8d\021\uff8d\027" +
    "\uff8d\031\uff8d\032\uff8d\001\002\000\004\012\071\001\002" +
    "\000\014\003\070\012\067\034\052\035\051\036\053\001" +
    "\002\000\024\003\uffb2\004\uffb2\010\uffb2\012\uffb2\014\uffb2" +
    "\015\uffb2\034\uffb2\035\uffb2\036\uffb2\001\002\000\024\003" +
    "\uffb1\004\uffb1\010\uffb1\012\uffb1\014\uffb1\015\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\001\002\000\024\003\uffb0\004\uffb0\010" +
    "\uffb0\012\uffb0\014\uffb0\015\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\001\002\000\006\003\074\006\073\001\002\000\006\010" +
    "\uff8c\043\075\001\002\000\004\010\uff8b\001\002\000\014" +
    "\006\035\007\034\011\036\044\041\045\033\001\002\000" +
    "\004\010\uff8a\001\002\000\004\010\103\001\002\000\014" +
    "\003\101\010\102\034\052\035\051\036\053\001\002\000" +
    "\024\003\uffb4\004\uffb4\010\uffb4\012\uffb4\014\uffb4\015\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\001\002\000\024\003\uffb5\004" +
    "\uffb5\010\uffb5\012\uffb5\014\uffb5\015\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\001\002\000\024\003\uffb3\004\uffb3\010\uffb3\012" +
    "\uffb3\014\uffb3\015\uffb3\034\uffb3\035\uffb3\036\uffb3\001\002" +
    "\000\004\004\203\001\002\000\012\007\034\011\036\044" +
    "\056\045\033\001\002\000\024\006\116\007\034\011\036" +
    "\013\111\022\112\024\113\042\110\044\056\045\033\001" +
    "\002\000\012\004\175\034\052\035\051\036\053\001\002" +
    "\000\004\004\174\001\002\000\012\007\034\011\036\044" +
    "\056\045\033\001\002\000\006\003\142\007\141\001\002" +
    "\000\004\007\126\001\002\000\004\004\125\001\002\000" +
    "\004\004\124\001\002\000\006\006\117\044\120\001\002" +
    "\000\004\004\123\001\002\000\004\006\121\001\002\000" +
    "\004\004\122\001\002\000\020\012\uff92\017\uff92\020\uff92" +
    "\021\uff92\027\uff92\031\uff92\032\uff92\001\002\000\020\012" +
    "\uff93\017\uff93\020\uff93\021\uff93\027\uff93\031\uff93\032\uff93" +
    "\001\002\000\020\012\uff91\017\uff91\020\uff91\021\uff91\027" +
    "\uff91\031\uff91\032\uff91\001\002\000\020\012\uff90\017\uff90" +
    "\020\uff90\021\uff90\027\uff90\031\uff90\032\uff90\001\002\000" +
    "\006\022\112\044\132\001\002\000\004\010\140\001\002" +
    "\000\006\010\uff9b\015\136\001\002\000\004\010\135\001" +
    "\002\000\006\010\uff99\015\133\001\002\000\004\044\132" +
    "\001\002\000\004\010\uff98\001\002\000\006\003\uff9d\004" +
    "\uff9d\001\002\000\004\022\112\001\002\000\004\010\uff9a" +
    "\001\002\000\006\003\uff9c\004\uff9c\001\002\000\004\045" +
    "\143\001\002\000\004\045\143\001\002\000\004\044\156" +
    "\001\002\000\010\033\147\034\146\035\145\001\002\000" +
    "\004\045\154\001\002\000\004\045\152\001\002\000\004" +
    "\045\150\001\002\000\004\010\151\001\002\000\012\003" +
    "\uffc3\004\uffc3\010\uffc3\015\uffc3\001\002\000\004\044\153" +
    "\001\002\000\010\033\uffc0\034\uffc0\035\uffc0\001\002\000" +
    "\004\044\155\001\002\000\010\033\uffbf\034\uffbf\035\uffbf" +
    "\001\002\000\010\033\uffbe\034\uffbe\035\uffbe\001\002\000" +
    "\010\033\160\034\146\035\145\001\002\000\006\003\162" +
    "\045\161\001\002\000\006\003\164\010\165\001\002\000" +
    "\004\010\163\001\002\000\012\003\uffc2\004\uffc2\010\uffc2" +
    "\015\uffc2\001\002\000\012\003\uffc1\004\uffc1\010\uffc1\015" +
    "\uffc1\001\002\000\012\003\uffc4\004\uffc4\010\uffc4\015\uffc4" +
    "\001\002\000\004\014\172\001\002\000\016\004\uffc6\014" +
    "\uffc6\015\170\034\052\035\051\036\053\001\002\000\012" +
    "\007\034\011\036\044\056\045\033\001\002\000\006\004" +
    "\uffc5\014\uffc5\001\002\000\004\004\173\001\002\000\020" +
    "\012\uff97\017\uff97\020\uff97\021\uff97\027\uff97\031\uff97\032" +
    "\uff97\001\002\000\020\012\uff94\017\uff94\020\uff94\021\uff94" +
    "\027\uff94\031\uff94\032\uff94\001\002\000\020\012\uff95\017" +
    "\uff95\020\uff95\021\uff95\027\uff95\031\uff95\032\uff95\001\002" +
    "\000\012\014\177\034\052\035\051\036\053\001\002\000" +
    "\004\033\200\001\002\000\004\045\201\001\002\000\004" +
    "\004\202\001\002\000\020\012\uff96\017\uff96\020\uff96\021" +
    "\uff96\027\uff96\031\uff96\032\uff96\001\002\000\020\012\uff8f" +
    "\017\uff8f\020\uff8f\021\uff8f\027\uff8f\031\uff8f\032\uff8f\001" +
    "\002\000\020\012\ufff0\017\ufff0\020\ufff0\021\ufff0\027\ufff0" +
    "\031\ufff0\032\ufff0\001\002\000\006\017\210\044\207\001" +
    "\002\000\004\010\244\001\002\000\004\033\236\001\002" +
    "\000\004\044\211\001\002\000\004\033\212\001\002\000" +
    "\004\045\213\001\002\000\004\016\214\001\002\000\006" +
    "\042\216\044\217\001\002\000\004\016\230\001\002\000" +
    "\006\010\uffaa\016\uffaa\001\002\000\004\041\220\001\002" +
    "\000\012\006\222\042\223\044\224\045\221\001\002\000" +
    "\006\010\uffa8\016\uffa8\001\002\000\006\006\225\044\226" +
    "\001\002\000\006\010\uffa9\016\uffa9\001\002\000\006\010" +
    "\uffa7\016\uffa7\001\002\000\006\010\uffa6\016\uffa6\001\002" +
    "\000\004\006\227\001\002\000\006\010\uffa5\016\uffa5\001" +
    "\002\000\006\040\232\044\233\001\002\000\004\010\uffa1" +
    "\001\002\000\004\044\235\001\002\000\004\040\234\001" +
    "\002\000\004\010\uff9f\001\002\000\004\010\uff9e\001\002" +
    "\000\004\045\237\001\002\000\004\016\240\001\002\000" +
    "\006\042\216\044\217\001\002\000\004\016\242\001\002" +
    "\000\006\040\232\044\233\001\002\000\004\010\uffa0\001" +
    "\002\000\004\011\245\001\002\000\004\004\246\001\002" +
    "\000\024\003\027\017\021\020\016\021\025\023\031\027" +
    "\014\031\012\032\026\044\030\001\002\000\020\012\255" +
    "\017\021\020\016\021\025\027\014\031\012\032\026\001" +
    "\002\000\020\012\ufff6\017\ufff6\020\ufff6\021\ufff6\027\ufff6" +
    "\031\ufff6\032\ufff6\001\002\000\020\012\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\027\ufff4\031\ufff4\032\ufff4\001\002\000\020" +
    "\012\ufffc\017\ufffc\020\ufffc\021\ufffc\027\ufffc\031\ufffc\032" +
    "\ufffc\001\002\000\020\012\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\027\ufff8\031\ufff8\032\ufff8\001\002\000\020\012\ufffa\017" +
    "\ufffa\020\ufffa\021\ufffa\027\ufffa\031\ufffa\032\ufffa\001\002" +
    "\000\004\004\256\001\002\000\020\012\uffa2\017\uffa2\020" +
    "\uffa2\021\uffa2\027\uffa2\031\uffa2\032\uffa2\001\002\000\004" +
    "\033\275\001\002\000\010\003\262\004\261\033\263\001" +
    "\002\000\020\012\uffe3\017\uffe3\020\uffe3\021\uffe3\027\uffe3" +
    "\031\uffe3\032\uffe3\001\002\000\006\004\272\042\273\001" +
    "\002\000\006\003\264\042\265\001\002\000\004\004\271" +
    "\001\002\000\006\003\267\004\266\001\002\000\020\012" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\027\uffe1\031\uffe1\032\uffe1" +
    "\001\002\000\004\004\270\001\002\000\020\012\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\027\uffdd\031\uffdd\032\uffdd\001\002" +
    "\000\020\012\uffde\017\uffde\020\uffde\021\uffde\027\uffde\031" +
    "\uffde\032\uffde\001\002\000\020\012\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\027\uffe2\031\uffe2\032\uffe2\001\002\000\004\004" +
    "\274\001\002\000\020\012\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\027\uffdf\031\uffdf\032\uffdf\001\002\000\004\042\276\001" +
    "\002\000\004\004\277\001\002\000\020\012\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\027\uffe0\031\uffe0\032\uffe0\001\002\000" +
    "\004\026\301\001\002\000\004\002\ufffe\001\002\000\004" +
    "\033\335\001\002\000\010\003\305\004\304\033\306\001" +
    "\002\000\020\012\uffef\017\uffef\020\uffef\021\uffef\027\uffef" +
    "\031\uffef\032\uffef\001\002\000\016\004\326\007\034\011" +
    "\036\013\327\044\056\045\033\001\002\000\016\003\307" +
    "\007\034\011\036\013\310\044\056\045\033\001\002\000" +
    "\012\007\034\011\036\044\056\045\033\001\002\000\012" +
    "\007\034\011\036\044\056\045\033\001\002\000\014\003" +
    "\313\004\312\034\052\035\051\036\053\001\002\000\020" +
    "\012\uffe7\017\uffe7\020\uffe7\021\uffe7\027\uffe7\031\uffe7\032" +
    "\uffe7\001\002\000\004\004\314\001\002\000\020\012\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\027\uffe4\031\uffe4\032\uffe4\001" +
    "\002\000\006\004\316\014\317\001\002\000\020\012\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\027\uffe8\031\uffe8\032\uffe8\001" +
    "\002\000\006\003\320\004\321\001\002\000\004\004\322" +
    "\001\002\000\020\012\uffed\017\uffed\020\uffed\021\uffed\027" +
    "\uffed\031\uffed\032\uffed\001\002\000\020\012\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\027\uffe9\031\uffe9\032\uffe9\001\002\000" +
    "\004\014\324\001\002\000\004\004\325\001\002\000\020" +
    "\012\uffea\017\uffea\020\uffea\021\uffea\027\uffea\031\uffea\032" +
    "\uffea\001\002\000\020\012\uffee\017\uffee\020\uffee\021\uffee" +
    "\027\uffee\031\uffee\032\uffee\001\002\000\012\007\034\011" +
    "\036\044\056\045\033\001\002\000\012\004\331\034\052" +
    "\035\051\036\053\001\002\000\020\012\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\027\uffe5\031\uffe5\032\uffe5\001\002\000\004" +
    "\014\333\001\002\000\004\004\334\001\002\000\020\012" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\027\uffeb\031\uffeb\032\uffeb" +
    "\001\002\000\014\007\034\011\036\013\336\044\056\045" +
    "\033\001\002\000\012\007\034\011\036\044\056\045\033" +
    "\001\002\000\012\004\340\034\052\035\051\036\053\001" +
    "\002\000\020\012\uffe6\017\uffe6\020\uffe6\021\uffe6\027\uffe6" +
    "\031\uffe6\032\uffe6\001\002\000\004\014\342\001\002\000" +
    "\004\004\343\001\002\000\020\012\uffec\017\uffec\020\uffec" +
    "\021\uffec\027\uffec\031\uffec\032\uffec\001\002\000\004\033" +
    "\u0110\001\002\000\010\003\347\004\346\033\350\001\002" +
    "\000\020\012\uffdc\017\uffdc\020\uffdc\021\uffdc\027\uffdc\031" +
    "\uffdc\032\uffdc\001\002\000\012\004\u0107\006\u0106\022\112" +
    "\024\113\001\002\000\012\003\353\006\352\022\112\024" +
    "\113\001\002\000\006\003\u0103\004\u0102\001\002\000\010" +
    "\003\366\006\365\044\367\001\002\000\006\006\360\044" +
    "\361\001\002\000\006\003\355\004\356\001\002\000\004" +
    "\004\357\001\002\000\020\012\uffce\017\uffce\020\uffce\021" +
    "\uffce\027\uffce\031\uffce\032\uffce\001\002\000\020\012\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\027\uffcb\031\uffcb\032\uffcb\001" +
    "\002\000\004\004\364\001\002\000\004\006\362\001\002" +
    "\000\004\004\363\001\002\000\020\012\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\027\uffd1\031\uffd1\032\uffd1\001\002\000\020" +
    "\012\uffd7\017\uffd7\020\uffd7\021\uffd7\027\uffd7\031\uffd7\032" +
    "\uffd7\001\002\000\006\003\377\004\u0100\001\002\000\004" +
    "\004\376\001\002\000\006\003\371\006\370\001\002\000" +
    "\006\003\373\004\374\001\002\000\004\004\372\001\002" +
    "\000\020\012\uffd0\017\uffd0\020\uffd0\021\uffd0\027\uffd0\031" +
    "\uffd0\032\uffd0\001\002\000\004\004\375\001\002\000\020" +
    "\012\uffd4\017\uffd4\020\uffd4\021\uffd4\027\uffd4\031\uffd4\032" +
    "\uffd4\001\002\000\020\012\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\027\uffcf\031\uffcf\032\uffcf\001\002\000\020\012\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\027\uffd6\031\uffd6\032\uffd6\001\002" +
    "\000\004\004\u0101\001\002\000\020\012\uffda\017\uffda\020" +
    "\uffda\021\uffda\027\uffda\031\uffda\032\uffda\001\002\000\020" +
    "\012\uffd5\017\uffd5\020\uffd5\021\uffd5\027\uffd5\031\uffd5\032" +
    "\uffd5\001\002\000\020\012\uffca\017\uffca\020\uffca\021\uffca" +
    "\027\uffca\031\uffca\032\uffca\001\002\000\004\004\u0104\001" +
    "\002\000\020\012\uffc7\017\uffc7\020\uffc7\021\uffc7\027\uffc7" +
    "\031\uffc7\032\uffc7\001\002\000\004\004\u010f\001\002\000" +
    "\006\006\u010a\044\u010b\001\002\000\020\012\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\027\uffdb\031\uffdb\032\uffdb\001\002\000" +
    "\004\004\u0109\001\002\000\020\012\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\027\uffcc\031\uffcc\032\uffcc\001\002\000\004\004" +
    "\u010e\001\002\000\004\006\u010c\001\002\000\004\004\u010d" +
    "\001\002\000\020\012\uffd2\017\uffd2\020\uffd2\021\uffd2\027" +
    "\uffd2\031\uffd2\032\uffd2\001\002\000\020\012\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\027\uffd8\031\uffd8\032\uffd8\001\002\000" +
    "\020\012\uffc8\017\uffc8\020\uffc8\021\uffc8\027\uffc8\031\uffc8" +
    "\032\uffc8\001\002\000\010\006\u0112\022\112\024\113\001" +
    "\002\000\004\004\u011a\001\002\000\006\006\u0115\044\u0116" +
    "\001\002\000\004\004\u0114\001\002\000\020\012\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\027\uffcd\031\uffcd\032\uffcd\001\002" +
    "\000\004\004\u0119\001\002\000\004\006\u0117\001\002\000" +
    "\004\004\u0118\001\002\000\020\012\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\027\uffd3\031\uffd3\032\uffd3\001\002\000\020\012" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\027\uffd9\031\uffd9\032\uffd9" +
    "\001\002\000\020\012\uffc9\017\uffc9\020\uffc9\021\uffc9\027" +
    "\uffc9\031\uffc9\032\uffc9\001\002\000\010\003\u011d\042\216" +
    "\044\217\001\002\000\004\010\u0124\001\002\000\004\010" +
    "\u011e\001\002\000\004\011\u011f\001\002\000\004\004\u0120" +
    "\001\002\000\024\003\027\017\021\020\016\021\025\023" +
    "\031\027\014\031\012\032\026\044\030\001\002\000\020" +
    "\012\u0122\017\021\020\016\021\025\027\014\031\012\032" +
    "\026\001\002\000\004\004\u0123\001\002\000\020\012\uffad" +
    "\017\uffad\020\uffad\021\uffad\027\uffad\031\uffad\032\uffad\001" +
    "\002\000\006\003\u0126\011\u0125\001\002\000\004\004\u012b" +
    "\001\002\000\004\004\u0127\001\002\000\024\003\027\017" +
    "\021\020\016\021\025\023\031\027\014\031\012\032\026" +
    "\044\030\001\002\000\020\012\u0129\017\021\020\016\021" +
    "\025\027\014\031\012\032\026\001\002\000\004\004\u012a" +
    "\001\002\000\020\012\uffac\017\uffac\020\uffac\021\uffac\027" +
    "\uffac\031\uffac\032\uffac\001\002\000\024\003\u012d\017\021" +
    "\020\016\021\025\023\031\027\014\031\012\032\026\044" +
    "\030\001\002\000\020\012\u0130\017\021\020\016\021\025" +
    "\027\014\031\012\032\026\001\002\000\006\004\204\012" +
    "\u012e\001\002\000\004\004\u012f\001\002\000\020\012\uffab" +
    "\017\uffab\020\uffab\021\uffab\027\uffab\031\uffab\032\uffab\001" +
    "\002\000\006\004\u0131\030\u0132\001\002\000\020\012\uffae" +
    "\017\uffae\020\uffae\021\uffae\027\uffae\031\uffae\032\uffae\001" +
    "\002\000\004\011\u0133\001\002\000\004\004\u0134\001\002" +
    "\000\024\003\027\017\021\020\016\021\025\023\031\027" +
    "\014\031\012\032\026\044\030\001\002\000\020\012\u0136" +
    "\017\021\020\016\021\025\027\014\031\012\032\026\001" +
    "\002\000\004\004\u0137\001\002\000\020\012\uffa4\017\uffa4" +
    "\020\uffa4\021\uffa4\027\uffa4\031\uffa4\032\uffa4\001\002\000" +
    "\006\042\216\044\217\001\002\000\004\010\u013a\001\002" +
    "\000\004\011\u013b\001\002\000\004\004\u013c\001\002\000" +
    "\024\003\027\017\021\020\016\021\025\023\031\027\014" +
    "\031\012\032\026\044\030\001\002\000\020\012\u013e\017" +
    "\021\020\016\021\025\027\014\031\012\032\026\001\002" +
    "\000\004\004\u013f\001\002\000\020\012\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\027\uffa3\031\uffa3\032\uffa3\001\002\000\024" +
    "\003\u0142\017\021\020\016\021\025\023\031\027\014\031" +
    "\012\032\026\044\030\001\002\000\020\012\u0144\017\021" +
    "\020\016\021\025\027\014\031\012\032\026\001\002\000" +
    "\006\004\204\026\u0143\001\002\000\004\002\ufffd\001\002" +
    "\000\006\003\u0145\026\u0146\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\000\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\023\004\014\006\022\007\021\010\010\011\012\025" +
    "\017\026\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\251\006\253\007\252\010\247\011\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\036\020\037\027\041" +
    "\001\001\000\002\001\001\000\006\017\036\020\077\001" +
    "\001\000\002\001\001\000\006\017\036\020\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\036\020\045\022\046\027\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\036" +
    "\020\061\001\001\000\006\017\036\020\057\001\001\000" +
    "\006\017\036\020\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\036\020\045\022\075\027\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\036\020\175\001\001\000\012\015\114\017\036\020" +
    "\106\021\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\165\017\036\020\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\127\023\130\024" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\127\023\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\156\001\001\000\004\016\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\170\017\036\020\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\240\001\001\000\002" +
    "\001\001\000\004\005\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\246\004\014" +
    "\006\022\007\021\010\010\011\012\025\017\026\016\001" +
    "\001\000\014\004\251\006\253\007\252\010\247\011\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\036\020\327\001\001\000\006\017\036" +
    "\020\310\001\001\000\010\014\322\017\036\020\166\001" +
    "\001\000\010\014\314\017\036\020\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\331\017\036\020\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\036\020\336\001" +
    "\001\000\010\014\340\017\036\020\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\u0104\021\u0107\001\001\000" +
    "\006\015\350\021\353\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\u0110\021\u0112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u011b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\u0120\004\014\006\022\007\021\010\010\011\012" +
    "\025\017\026\016\001\001\000\014\004\251\006\253\007" +
    "\252\010\247\011\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\u0127\004\014\006\022\007\021\010\010" +
    "\011\012\025\017\026\016\001\001\000\014\004\251\006" +
    "\253\007\252\010\247\011\250\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\u012b\004\014\006\022\007" +
    "\021\010\010\011\012\025\017\026\016\001\001\000\014" +
    "\004\251\006\253\007\252\010\247\011\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\u0134\004\014\006\022\007\021\010\010" +
    "\011\012\025\017\026\016\001\001\000\014\004\251\006" +
    "\253\007\252\010\247\011\250\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u0138\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\u013c" +
    "\004\014\006\022\007\021\010\010\011\012\025\017\026" +
    "\016\001\001\000\014\004\251\006\253\007\252\010\247" +
    "\011\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\u0140\004\014\006\022\007\021\010\010\011\012" +
    "\025\017\026\016\001\001\000\014\004\251\006\253\007" +
    "\252\010\247\011\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(java_cup.runtime.Symbol cur_token){
        // CUP ya tiene las posiciones exactas en cur_token.left y cur_token.right
        int linea = cur_token.right + 1;   // columna final del token
        int columna = cur_token.left + 1;  // columna inicial del token
        String lexema = (cur_token.value != null) ? cur_token.value.toString() : "EOF";

        // CUP construye el mensaje listo en texto
        Errores.add("Error de sintaxis: Línea " + linea +
                    ", Columna " + columna +
                    ", Texto: \"" + lexema + "\"");
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION_MENSAJES ::= MENSAJE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MENSAJES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION_MENSAJES ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MENSAJES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // MENSAJE ::= Identificador Concatenacion EXPRESION_MENSAJES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // MENSAJE ::= Comillas Identificador Comillas Concatenacion EXPRESION_MENSAJES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // MENSAJE ::= Comillas Identificador error 
            {
              Object RESULT =null;
		 
           Errores.add("True \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // MENSAJE ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // MOSTRAR ::= Mostrar Parentesis_a OPERACION Parentesis_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOSTRAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // MOSTRAR ::= Mostrar Parentesis_a MENSAJE Parentesis_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOSTRAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_SIMPLE ::= Identificador Op_relacional Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_SIMPLE ::= Identificador Igual RESOLVER Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA_SIMPLE ::= Identificador Igual ECUACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA_SIMPLE ::= Identificador Igual Comillas Identificador Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA_SIMPLE ::= Identificador Igual Comillas Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA_SIMPLE ::= Identificador Igual Op_booleano Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA_SIMPLE ::= Identificador Igual OPERACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA_SIMPLE ::= Identificador Corchete_a OPERACION Corchete_c Igual Numero Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_SIMPLE ::= Identificador Igual Corchete_a LISTA_NUMEROS Corchete_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LISTA_IDENTIFICADORES ::= Identificador Coma LISTA_IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LISTA_IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LISTA_ECUACIONES ::= ECUACION Coma LISTA_ECUACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ECUACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LISTA_ECUACIONES ::= ECUACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ECUACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // RESOLVER ::= ResolverSistema Parentesis_a LISTA_IDENTIFICADORES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESOLVER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // RESOLVER ::= ResolverSistema Parentesis_a LISTA_ECUACIONES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESOLVER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_FOR ::= Num Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Else Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea error Llave_c Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una sentencia entre las llaves \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c error Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una llave despues del ultimo parentesis \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IF ::= If Parentesis_a error Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una condicion entre los parentesis \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERACION ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERACION ::= Llave_a error Llave_c 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una operacion entre las llaves \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERACION ::= Llave_a OPERACION error 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una llave al final \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERACION ::= Llave_a OPERACION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERACION ::= Parentesis_a error Parentesis_c 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una operacion entre los parentesis \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERACION ::= Parentesis_a OPERACION error 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera un parentesis al final \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERACION ::= Parentesis_a OPERACION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERACION ::= OPERACION Multiplicacion error 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una operacion al final \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERACION ::= OPERACION Multiplicacion OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERACION ::= OPERACION Resta error 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una operacion al final \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERACION ::= OPERACION Resta OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERACION ::= OPERACION Suma error 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una operacion al final \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERACION ::= OPERACION Suma OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TERMINO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TERMINO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= Numero Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= EXPRESION Resta Numero Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= EXPRESION Suma Numero Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ECUACION ::= Ecuacion Parentesis_a EXPRESION Igual Numero error 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba ( despues de Numero \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ECUACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ECUACION ::= Ecuacion Parentesis_a EXPRESION Igual error Parentesis_c 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba un número despues de Igual \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ECUACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ECUACION ::= Ecuacion error EXPRESION Igual Numero Parentesis_c 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba ( despues de Ecuacion \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ECUACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ECUACION ::= Ecuacion Parentesis_a EXPRESION Igual Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ECUACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTA_NUMEROS ::= OPERACION Coma LISTA_NUMEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_NUMEROS ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Cadena Identificador Igual ECUACION error Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Acabado incorrecto de declaracion \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Cadena Identificador error ECUACION Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba = despues de Identificador \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Cadena error Igual ECUACION Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba Identificador despues de Cadena \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Cadena Identificador Igual ECUACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Cadena Identificador Igual RESOLVER error Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Acabado incorrecto de declaracion \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Cadena Identificador error RESOLVER Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba = despues de Identificador \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Cadena error Igual RESOLVER Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba Identificador despues de Cadena \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Cadena Identificador Igual RESOLVER Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas error Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Acabado incorrecto de declaracion \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador error Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba Comillas despues de identificador \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Cadena Identificador Igual error Identificador Comillas Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba Comillas despues de = \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Cadena Identificador error Comillas Identificador Comillas Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba = despues de Identificador \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Cadena error Igual Comillas Identificador Comillas Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba Identificador despues de Cadena \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas error Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Acabado incorrecto de declaracion \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Cadena Identificador Igual Comillas error Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba Comillas despues de Comillas \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Cadena Identificador Igual error Comillas Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba Comillas despues de = \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Cadena Identificador error Comillas Comillas Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba = despues de Identificador \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Cadena error Igual Comillas Comillas Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba identificador despues de Cadena \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Cadena Identificador error Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Acabado incorrecto de declaracion \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Cadena Identificador Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Bool Identificador Igual Op_booleano error Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Acabado incorrecto de declaracion \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Bool Identificador Igual error Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba un Operador booleano despues de = \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Bool Identificador error Op_booleano Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba un = despues de Identificador\n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Bool error Igual Op_booleano Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba un identificador despues de Bool\n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Bool Identificador Igual Op_booleano Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Bool Identificador error Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Acabado incorrecto de declaracion \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Bool Identificador Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Num Identificador Igual OPERACION error Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Acabado incorrecto de declaracion\n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Num Identificador error OPERACION Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba = despues de Identificador \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Num error Igual OPERACION Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba Identificador despues de Num \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Num Identificador Igual OPERACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Num Identificador Igual Corchete_a LISTA_NUMEROS Linea 
            {
              Object RESULT =null;
		 
           Errores.add("ERROR:No hubo cierre de corchete \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Num Identificador Igual Corchete_a LISTA_NUMEROS Corchete_c error Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Acabado incorrecto de declaracion \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Num Identificador Igual error LISTA_NUMEROS Corchete_c Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba [ despues de = \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Num Identificador error Corchete_a LISTA_NUMEROS Corchete_c Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba = despues de identificador \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Num error Igual Corchete_a LISTA_NUMEROS Corchete_c Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba identificador despues de Num \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Num Identificador Igual Corchete_a LISTA_NUMEROS Corchete_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Num Identificador error Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Acabado incorrecto de declaracion \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Num Identificador Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= error Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Sentencia incorrecta \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= MOSTRAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Inicio Llave_a Linea error Fin 
            {
              Object RESULT =null;
		 
            Errores.add("Se esperaba } despues de la sentencia \n");
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Inicio error Linea SENTENCIA Llave_c Fin 
            {
              Object RESULT =null;
		 
            Errores.add("Se esperaba { despues de Inicio \n");
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Inicio Llave_a Linea SENTENCIA Llave_c error 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba Fin despues de } \n"); 
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Inicio Llave_a Linea SENTENCIA Llave_c Fin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

