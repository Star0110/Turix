
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Aug 21 18:56:13 CST 2025
//----------------------------------------------------

package analizadorlexico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Aug 21 18:56:13 CST 2025
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\004\005\000\002\004" +
    "\011\000\002\004\007\000\002\004\005\000\002\004\007" +
    "\000\002\004\005\000\002\004\010\000\002\004\011\000" +
    "\002\004\007\000\002\004\007\000\002\014\003\000\002" +
    "\014\005\000\002\015\010\000\002\016\006\000\002\016" +
    "\006\000\002\016\004\000\002\017\003\000\002\017\003" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\003\000\002" +
    "\006\013\000\002\012\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\006\000\002\012\007" +
    "\000\002\007\020\000\002\010\013\000\002\011\013\000" +
    "\002\013\012\000\002\013\011\000\002\005\004\000\002" +
    "\005\004\000\002\021\006\000\002\021\006\000\002\023" +
    "\003\000\002\023\005\000\002\024\003\000\002\024\005" +
    "\000\002\025\010\000\002\025\011\000\002\025\006\000" +
    "\002\025\006\000\002\025\007\000\002\025\010\000\002" +
    "\025\006\000\002\025\006\000\002\025\005\000\002\026" +
    "\007\000\002\026\007\000\002\027\005\000\002\027\007" +
    "\000\002\027\005\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\004\024\005\001\002\000\004\002\315\001" +
    "\002\000\004\010\006\001\002\000\004\004\007\001\002" +
    "\000\022\016\021\017\015\020\024\022\026\026\012\030" +
    "\013\031\025\043\027\001\002\000\020\011\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\026\ufff8\030\ufff8\031\ufff8\001\002\000" +
    "\020\011\ufff6\016\ufff6\017\ufff6\020\ufff6\026\ufff6\030\ufff6" +
    "\031\ufff6\001\002\000\004\006\277\001\002\000\004\006" +
    "\267\001\002\000\020\011\ufffe\016\ufffe\017\ufffe\020\ufffe" +
    "\026\ufffe\030\ufffe\031\ufffe\001\002\000\004\043\252\001" +
    "\002\000\020\011\ufff4\016\ufff4\017\ufff4\020\ufff4\026\ufff4" +
    "\030\ufff4\031\ufff4\001\002\000\020\011\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\026\ufff5\030\ufff5\031\ufff5\001\002\000\020" +
    "\011\ufffa\016\ufffa\017\ufffa\020\ufffa\026\ufffa\030\ufffa\031" +
    "\ufffa\001\002\000\004\043\241\001\002\000\020\011\ufffc" +
    "\016\ufffc\017\ufffc\020\ufffc\026\ufffc\030\ufffc\031\ufffc\001" +
    "\002\000\020\011\237\016\021\017\015\020\024\026\012" +
    "\030\013\031\025\001\002\000\004\043\232\001\002\000" +
    "\004\006\160\001\002\000\004\006\137\001\002\000\010" +
    "\012\031\032\032\040\030\001\002\000\004\004\136\001" +
    "\002\000\012\006\037\010\044\043\042\044\046\001\002" +
    "\000\024\005\047\006\037\010\044\012\035\021\036\023" +
    "\040\041\033\043\042\044\046\001\002\000\004\004\130" +
    "\001\002\000\012\004\127\033\061\034\060\035\062\001" +
    "\002\000\012\006\037\010\044\043\042\044\046\001\002" +
    "\000\004\006\104\001\002\000\012\006\037\010\044\043" +
    "\042\044\046\001\002\000\004\006\067\001\002\000\004" +
    "\004\066\001\002\000\022\004\uffe2\007\uffe2\011\uffe2\013" +
    "\uffe2\014\uffe2\033\uffe2\034\uffe2\035\uffe2\001\002\000\022" +
    "\004\uffdc\007\uffdc\011\uffdc\013\uffdc\014\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\001\002\000\012\006\037\010\044\043\042" +
    "\044\046\001\002\000\004\004\055\001\002\000\022\004" +
    "\uffe3\007\uffe3\011\uffe3\013\uffe3\014\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\001\002\000\006\005\050\043\051\001\002\000" +
    "\004\004\054\001\002\000\004\005\052\001\002\000\004" +
    "\004\053\001\002\000\020\011\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\026\uffc2\030\uffc2\031\uffc2\001\002\000\020\011\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\026\uffc3\030\uffc3\031\uffc3\001" +
    "\002\000\020\011\uffc1\016\uffc1\017\uffc1\020\uffc1\026\uffc1" +
    "\030\uffc1\031\uffc1\001\002\000\012\011\057\033\061\034" +
    "\060\035\062\001\002\000\022\004\uffdd\007\uffdd\011\uffdd" +
    "\013\uffdd\014\uffdd\033\uffdd\034\uffdd\035\uffdd\001\002\000" +
    "\012\006\037\010\044\043\042\044\046\001\002\000\012" +
    "\006\037\010\044\043\042\044\046\001\002\000\012\006" +
    "\037\010\044\043\042\044\046\001\002\000\022\004\uffdf" +
    "\007\uffdf\011\uffdf\013\uffdf\014\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\001\002\000\022\004\uffe1\007\uffe1\011\uffe1\013\uffe1" +
    "\014\uffe1\033\uffe1\034\uffe1\035\062\001\002\000\022\004" +
    "\uffe0\007\uffe0\011\uffe0\013\uffe0\014\uffe0\033\uffe0\034\uffe0" +
    "\035\062\001\002\000\020\011\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\026\uffc0\030\uffc0\031\uffc0\001\002\000\006\021\036" +
    "\043\073\001\002\000\004\007\101\001\002\000\006\007" +
    "\uffcb\014\077\001\002\000\004\007\076\001\002\000\006" +
    "\007\uffc9\014\074\001\002\000\004\043\073\001\002\000" +
    "\004\007\uffc8\001\002\000\004\004\uffcd\001\002\000\004" +
    "\021\036\001\002\000\004\007\uffca\001\002\000\004\004" +
    "\uffcc\001\002\000\012\007\103\033\061\034\060\035\062" +
    "\001\002\000\022\004\uffde\007\uffde\011\uffde\013\uffde\014" +
    "\uffde\033\uffde\034\uffde\035\uffde\001\002\000\004\044\105" +
    "\001\002\000\004\043\120\001\002\000\010\032\111\033" +
    "\110\034\107\001\002\000\004\044\116\001\002\000\004" +
    "\044\114\001\002\000\004\044\112\001\002\000\004\007" +
    "\113\001\002\000\010\004\uffe7\007\uffe7\014\uffe7\001\002" +
    "\000\004\043\115\001\002\000\010\032\uffe6\033\uffe6\034" +
    "\uffe6\001\002\000\004\043\117\001\002\000\010\032\uffe5" +
    "\033\uffe5\034\uffe5\001\002\000\010\032\uffe4\033\uffe4\034" +
    "\uffe4\001\002\000\004\013\125\001\002\000\014\013\uffe9" +
    "\014\123\033\061\034\060\035\062\001\002\000\012\006" +
    "\037\010\044\043\042\044\046\001\002\000\004\013\uffe8" +
    "\001\002\000\004\004\126\001\002\000\020\011\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\026\uffc7\030\uffc7\031\uffc7\001\002" +
    "\000\020\011\uffc5\016\uffc5\017\uffc5\020\uffc5\026\uffc5\030" +
    "\uffc5\031\uffc5\001\002\000\020\011\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\026\uffc4\030\uffc4\031\uffc4\001\002\000\012\013" +
    "\132\033\061\034\060\035\062\001\002\000\004\032\133" +
    "\001\002\000\004\044\134\001\002\000\004\004\135\001" +
    "\002\000\020\011\uffc6\016\uffc6\017\uffc6\020\uffc6\026\uffc6" +
    "\030\uffc6\031\uffc6\001\002\000\020\011\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\026\uffbf\030\uffbf\031\uffbf\001\002\000\014" +
    "\005\140\006\037\010\044\043\142\044\046\001\002\000" +
    "\004\043\154\001\002\000\012\007\152\033\061\034\060" +
    "\035\062\001\002\000\014\007\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\042\146\001\002\000\004\007\144\001\002\000\004" +
    "\004\145\001\002\000\020\011\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\026\uffbe\030\uffbe\031\uffbe\001\002\000\014\005\140" +
    "\006\037\010\044\043\142\044\046\001\002\000\012\007" +
    "\uffb9\033\061\034\060\035\062\001\002\000\004\007\uffba" +
    "\001\002\000\004\007\uffb8\001\002\000\004\004\153\001" +
    "\002\000\020\011\uffbd\016\uffbd\017\uffbd\020\uffbd\026\uffbd" +
    "\030\uffbd\031\uffbd\001\002\000\004\005\155\001\002\000" +
    "\006\007\uffbc\042\156\001\002\000\014\005\140\006\037" +
    "\010\044\043\142\044\046\001\002\000\004\007\uffbb\001" +
    "\002\000\006\016\163\043\162\001\002\000\004\007\217" +
    "\001\002\000\004\032\211\001\002\000\004\043\164\001" +
    "\002\000\004\032\165\001\002\000\004\044\166\001\002" +
    "\000\004\015\167\001\002\000\006\041\171\043\172\001" +
    "\002\000\004\015\203\001\002\000\006\007\uffda\015\uffda" +
    "\001\002\000\004\040\173\001\002\000\012\005\175\041" +
    "\176\043\177\044\174\001\002\000\006\007\uffd8\015\uffd8" +
    "\001\002\000\006\005\200\043\201\001\002\000\006\007" +
    "\uffd9\015\uffd9\001\002\000\006\007\uffd7\015\uffd7\001\002" +
    "\000\006\007\uffd6\015\uffd6\001\002\000\004\005\202\001" +
    "\002\000\006\007\uffd5\015\uffd5\001\002\000\006\037\206" +
    "\043\205\001\002\000\004\007\uffd1\001\002\000\004\037" +
    "\210\001\002\000\004\043\207\001\002\000\004\007\uffce" +
    "\001\002\000\004\007\uffcf\001\002\000\004\044\212\001" +
    "\002\000\004\015\213\001\002\000\006\041\171\043\172" +
    "\001\002\000\004\015\215\001\002\000\006\037\206\043" +
    "\205\001\002\000\004\007\uffd0\001\002\000\004\010\220" +
    "\001\002\000\004\004\221\001\002\000\022\016\021\017" +
    "\015\020\024\022\026\026\012\030\013\031\025\043\027" +
    "\001\002\000\020\011\230\016\021\017\015\020\024\026" +
    "\012\030\013\031\025\001\002\000\020\011\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\026\ufff9\030\ufff9\031\ufff9\001\002\000" +
    "\020\011\ufff7\016\ufff7\017\ufff7\020\ufff7\026\ufff7\030\ufff7" +
    "\031\ufff7\001\002\000\020\011\uffff\016\uffff\017\uffff\020" +
    "\uffff\026\uffff\030\uffff\031\uffff\001\002\000\020\011\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\026\ufffb\030\ufffb\031\ufffb\001" +
    "\002\000\020\011\ufffd\016\ufffd\017\ufffd\020\ufffd\026\ufffd" +
    "\030\ufffd\031\ufffd\001\002\000\004\004\231\001\002\000" +
    "\020\011\uffd2\016\uffd2\017\uffd2\020\uffd2\026\uffd2\030\uffd2" +
    "\031\uffd2\001\002\000\006\004\233\032\234\001\002\000" +
    "\020\011\ufff0\016\ufff0\017\ufff0\020\ufff0\026\ufff0\030\ufff0" +
    "\031\ufff0\001\002\000\004\041\235\001\002\000\004\004" +
    "\236\001\002\000\020\011\uffef\016\uffef\017\uffef\020\uffef" +
    "\026\uffef\030\uffef\031\uffef\001\002\000\004\025\240\001" +
    "\002\000\004\002\000\001\002\000\006\004\242\032\243" +
    "\001\002\000\020\011\ufff3\016\ufff3\017\ufff3\020\ufff3\026" +
    "\ufff3\030\ufff3\031\ufff3\001\002\000\014\006\037\010\044" +
    "\012\244\043\042\044\046\001\002\000\012\006\037\010" +
    "\044\043\042\044\046\001\002\000\012\004\246\033\061" +
    "\034\060\035\062\001\002\000\020\011\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\026\ufff1\030\ufff1\031\ufff1\001\002\000\004" +
    "\013\250\001\002\000\004\004\251\001\002\000\020\011" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\026\ufff2\030\ufff2\031\ufff2" +
    "\001\002\000\006\004\253\032\254\001\002\000\020\011" +
    "\uffee\016\uffee\017\uffee\020\uffee\026\uffee\030\uffee\031\uffee" +
    "\001\002\000\010\005\256\021\036\023\040\001\002\000" +
    "\004\004\266\001\002\000\006\005\261\043\262\001\002" +
    "\000\004\004\260\001\002\000\020\011\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\026\uffeb\030\uffeb\031\uffeb\001\002\000\004" +
    "\004\265\001\002\000\004\005\263\001\002\000\004\004" +
    "\264\001\002\000\020\011\uffec\016\uffec\017\uffec\020\uffec" +
    "\026\uffec\030\uffec\031\uffec\001\002\000\020\011\uffed\016" +
    "\uffed\017\uffed\020\uffed\026\uffed\030\uffed\031\uffed\001\002" +
    "\000\020\011\uffea\016\uffea\017\uffea\020\uffea\026\uffea\030" +
    "\uffea\031\uffea\001\002\000\006\041\171\043\172\001\002" +
    "\000\004\007\271\001\002\000\004\010\272\001\002\000" +
    "\004\004\273\001\002\000\022\016\021\017\015\020\024" +
    "\022\026\026\012\030\013\031\025\043\027\001\002\000" +
    "\020\011\275\016\021\017\015\020\024\026\012\030\013" +
    "\031\025\001\002\000\004\004\276\001\002\000\020\011" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\026\uffd3\030\uffd3\031\uffd3" +
    "\001\002\000\006\041\171\043\172\001\002\000\004\007" +
    "\301\001\002\000\004\010\302\001\002\000\004\004\303" +
    "\001\002\000\022\016\021\017\015\020\024\022\026\026" +
    "\012\030\013\031\025\043\027\001\002\000\020\011\305" +
    "\016\021\017\015\020\024\026\012\030\013\031\025\001" +
    "\002\000\006\004\306\027\307\001\002\000\020\011\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\026\uffdb\030\uffdb\031\uffdb\001" +
    "\002\000\004\010\310\001\002\000\004\004\311\001\002" +
    "\000\022\016\021\017\015\020\024\022\026\026\012\030" +
    "\013\031\025\043\027\001\002\000\020\011\313\016\021" +
    "\017\015\020\024\026\012\030\013\031\025\001\002\000" +
    "\004\004\314\001\002\000\020\011\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\026\uffd4\030\uffd4\031\uffd4\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\022\004\013" +
    "\006\021\007\017\010\007\011\010\025\016\026\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\224\006\226\007" +
    "\225\010\222\011\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\042\020\130\001\001\000\012\015\044" +
    "\017\042\020\033\021\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\120\017\042\020\121\001\001" +
    "\000\002\001\001\000\006\017\042\020\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\042\020\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\042\020\064\001\001\000\006\017" +
    "\042\020\063\001\001\000\006\017\042\020\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\070\023\071\024\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\070\023\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\123\017\042\020\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\042\020\140\027\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\042" +
    "\020\146\022\147\027\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\042\020\146\022\156\027\150\001\001\000\002\001\001" +
    "\000\004\013\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\213\001\001\000\002\001\001\000\004\005\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\221\004\013\006\021\007\017\010\007\011\010" +
    "\025\016\026\015\001\001\000\014\004\224\006\226\007" +
    "\225\010\222\011\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\042\020\244\001" +
    "\001\000\010\014\246\017\042\020\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\254\021\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\267" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\273\004\013\006\021\007\017\010\007" +
    "\011\010\025\016\026\015\001\001\000\014\004\224\006" +
    "\226\007\225\010\222\011\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\303" +
    "\004\013\006\021\007\017\010\007\011\010\025\016\026" +
    "\015\001\001\000\014\004\224\006\226\007\225\010\222" +
    "\011\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\311\004\013" +
    "\006\021\007\017\010\007\011\010\025\016\026\015\001" +
    "\001\000\014\004\224\006\226\007\225\010\222\011\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION_MENSAJES ::= MENSAJE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MENSAJES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION_MENSAJES ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MENSAJES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MENSAJE ::= Identificador Concatenacion EXPRESION_MENSAJES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MENSAJE ::= Comillas Identificador Comillas Concatenacion EXPRESION_MENSAJES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MENSAJE ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // MOSTRAR ::= Mostrar Parentesis_a OPERACION Parentesis_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOSTRAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MOSTRAR ::= Mostrar Parentesis_a MENSAJE Parentesis_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOSTRAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_SIMPLE ::= Identificador Op_relacional Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_SIMPLE ::= Identificador Igual RESOLVER Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_SIMPLE ::= Identificador Igual ECUACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_SIMPLE ::= Identificador Igual Comillas Identificador Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_SIMPLE ::= Identificador Igual Comillas Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_SIMPLE ::= Identificador Igual Op_booleano Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_SIMPLE ::= Identificador Igual OPERACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_SIMPLE ::= Identificador Corchete_a OPERACION Corchete_c Igual Numero Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_SIMPLE ::= Identificador Igual Corchete_a LISTA_NUMEROS Corchete_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LISTA_IDENTIFICADORES ::= Identificador Coma LISTA_IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LISTA_IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTA_ECUACIONES ::= ECUACION Coma LISTA_ECUACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ECUACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTA_ECUACIONES ::= ECUACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ECUACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RESOLVER ::= ResolverSistema Parentesis_a LISTA_IDENTIFICADORES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESOLVER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RESOLVER ::= ResolverSistema Parentesis_a LISTA_ECUACIONES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESOLVER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_FOR ::= Num Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Else Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION ::= Llave_a OPERACION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION ::= Parentesis_a OPERACION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION ::= OPERACION Multiplicacion OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION ::= OPERACION Resta OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION ::= OPERACION Suma OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TERMINO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TERMINO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= Numero Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= EXPRESION Resta Numero Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= EXPRESION Suma Numero Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ECUACION ::= Ecuacion Parentesis_a EXPRESION Igual Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ECUACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA_NUMEROS ::= OPERACION Coma LISTA_NUMEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTA_NUMEROS ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Cadena Identificador Igual ECUACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Cadena Identificador Igual RESOLVER Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Cadena Identificador Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Bool Identificador Igual Op_booleano Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Bool Identificador Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Num Identificador Igual OPERACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= Num Identificador Igual Corchete_a LISTA_NUMEROS Corchete_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= Num Identificador Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= MOSTRAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Inicio Llave_a Linea SENTENCIA Llave_c Fin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

