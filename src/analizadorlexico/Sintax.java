
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Aug 31 19:01:34 CST 2025
//----------------------------------------------------

package analizadorlexico;

import java_cup.runtime.Symbol;
import analizadorlexico.Errores;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Aug 31 19:01:34 CST 2025
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\004" +
    "\005\000\002\004\011\000\002\004\007\000\002\004\005" +
    "\000\002\004\007\000\002\004\007\000\002\004\005\000" +
    "\002\004\010\000\002\004\011\000\002\004\007\000\002" +
    "\004\007\000\002\014\003\000\002\014\005\000\002\015" +
    "\010\000\002\016\006\000\002\016\006\000\002\016\004" +
    "\000\002\017\003\000\002\017\003\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\003\000\002\006\013\000" +
    "\002\006\013\000\002\006\013\000\002\006\013\000\002" +
    "\012\003\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\006\000\002\012\007\000\002\007\020" +
    "\000\002\010\013\000\002\011\013\000\002\013\012\000" +
    "\002\013\011\000\002\005\004\000\002\005\004\000\002" +
    "\021\006\000\002\021\006\000\002\023\003\000\002\023" +
    "\005\000\002\024\003\000\002\024\005\000\002\025\010" +
    "\000\002\025\011\000\002\025\006\000\002\025\006\000" +
    "\002\025\007\000\002\025\010\000\002\025\006\000\002" +
    "\025\006\000\002\025\005\000\002\026\007\000\002\026" +
    "\007\000\002\027\005\000\002\027\005\000\002\027\007" +
    "\000\002\027\005\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\004\025\005\001\002\000\004\002\353\001" +
    "\002\000\004\011\006\001\002\000\004\004\007\001\002" +
    "\000\022\017\021\020\015\021\024\023\026\027\013\031" +
    "\011\032\025\044\027\001\002\000\020\012\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\027\ufff7\031\ufff7\032\ufff7\001\002\000" +
    "\004\007\343\001\002\000\020\012\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\027\ufff5\031\ufff5\032\ufff5\001\002\000\004\007" +
    "\306\001\002\000\020\012\ufffd\017\ufffd\020\ufffd\021\ufffd" +
    "\027\ufffd\031\ufffd\032\ufffd\001\002\000\004\044\271\001" +
    "\002\000\020\012\ufff4\017\ufff4\020\ufff4\021\ufff4\027\ufff4" +
    "\031\ufff4\032\ufff4\001\002\000\020\012\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\027\ufff3\031\ufff3\032\ufff3\001\002\000\020" +
    "\012\ufff9\017\ufff9\020\ufff9\021\ufff9\027\ufff9\031\ufff9\032" +
    "\ufff9\001\002\000\004\044\260\001\002\000\020\012\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\027\ufffb\031\ufffb\032\ufffb\001" +
    "\002\000\020\012\255\017\021\020\015\021\024\027\013" +
    "\031\011\032\025\001\002\000\006\003\244\044\245\001" +
    "\002\000\004\007\172\001\002\000\004\007\150\001\002" +
    "\000\010\013\031\033\032\041\030\001\002\000\004\004" +
    "\147\001\002\000\012\007\037\011\044\044\042\045\046" +
    "\001\002\000\024\006\047\007\037\011\044\013\035\022" +
    "\036\024\040\042\033\044\042\045\046\001\002\000\004" +
    "\004\141\001\002\000\012\004\140\034\063\035\062\036" +
    "\064\001\002\000\012\007\037\011\044\044\042\045\046" +
    "\001\002\000\004\007\115\001\002\000\014\003\110\007" +
    "\037\011\044\044\042\045\046\001\002\000\004\007\075" +
    "\001\002\000\004\004\074\001\002\000\024\003\uffe0\004" +
    "\uffe0\010\uffe0\012\uffe0\014\uffe0\015\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\001\002\000\024\003\uffd3\004\uffd3\010\uffd3\012" +
    "\uffd3\014\uffd3\015\uffd3\034\uffd3\035\uffd3\036\uffd3\001\002" +
    "\000\014\003\056\007\037\011\044\044\042\045\046\001" +
    "\002\000\004\004\055\001\002\000\024\003\uffe1\004\uffe1" +
    "\010\uffe1\012\uffe1\014\uffe1\015\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\001\002\000\006\006\050\044\051\001\002\000\004" +
    "\004\054\001\002\000\004\006\052\001\002\000\004\004" +
    "\053\001\002\000\020\012\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\027\uffb6\031\uffb6\032\uffb6\001\002\000\020\012\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\027\uffb7\031\uffb7\032\uffb7\001\002" +
    "\000\020\012\uffb5\017\uffb5\020\uffb5\021\uffb5\027\uffb5\031" +
    "\uffb5\032\uffb5\001\002\000\004\012\073\001\002\000\014" +
    "\003\061\012\060\034\063\035\062\036\064\001\002\000" +
    "\024\003\uffd6\004\uffd6\010\uffd6\012\uffd6\014\uffd6\015\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\001\002\000\024\003\uffd5\004" +
    "\uffd5\010\uffd5\012\uffd5\014\uffd5\015\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\001\002\000\014\003\071\007\037\011\044\044" +
    "\042\045\046\001\002\000\014\003\067\007\037\011\044" +
    "\044\042\045\046\001\002\000\014\003\065\007\037\011" +
    "\044\044\042\045\046\001\002\000\024\003\uffda\004\uffda" +
    "\010\uffda\012\uffda\014\uffda\015\uffda\034\uffda\035\uffda\036" +
    "\uffda\001\002\000\024\003\uffdb\004\uffdb\010\uffdb\012\uffdb" +
    "\014\uffdb\015\uffdb\034\uffdb\035\uffdb\036\uffdb\001\002\000" +
    "\024\003\uffde\004\uffde\010\uffde\012\uffde\014\uffde\015\uffde" +
    "\034\uffde\035\uffde\036\uffde\001\002\000\024\003\uffdf\004" +
    "\uffdf\010\uffdf\012\uffdf\014\uffdf\015\uffdf\034\uffdf\035\uffdf" +
    "\036\064\001\002\000\024\003\uffdc\004\uffdc\010\uffdc\012" +
    "\uffdc\014\uffdc\015\uffdc\034\uffdc\035\uffdc\036\uffdc\001\002" +
    "\000\024\003\uffdd\004\uffdd\010\uffdd\012\uffdd\014\uffdd\015" +
    "\uffdd\034\uffdd\035\uffdd\036\064\001\002\000\024\003\uffd4" +
    "\004\uffd4\010\uffd4\012\uffd4\014\uffd4\015\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\001\002\000\020\012\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\027\uffb4\031\uffb4\032\uffb4\001\002\000\006\022" +
    "\036\044\101\001\002\000\006\010\uffbf\015\106\001\002" +
    "\000\004\010\105\001\002\000\004\010\104\001\002\000" +
    "\006\010\uffbd\015\102\001\002\000\004\044\101\001\002" +
    "\000\004\010\uffbc\001\002\000\004\004\uffc1\001\002\000" +
    "\004\004\uffc0\001\002\000\004\022\036\001\002\000\004" +
    "\010\uffbe\001\002\000\004\010\114\001\002\000\014\003" +
    "\112\010\113\034\063\035\062\036\064\001\002\000\024" +
    "\003\uffd8\004\uffd8\010\uffd8\012\uffd8\014\uffd8\015\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\001\002\000\024\003\uffd9\004\uffd9" +
    "\010\uffd9\012\uffd9\014\uffd9\015\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\001\002\000\024\003\uffd7\004\uffd7\010\uffd7\012\uffd7" +
    "\014\uffd7\015\uffd7\034\uffd7\035\uffd7\036\uffd7\001\002\000" +
    "\004\045\116\001\002\000\004\044\131\001\002\000\010" +
    "\033\122\034\121\035\120\001\002\000\004\045\127\001" +
    "\002\000\004\045\125\001\002\000\004\045\123\001\002" +
    "\000\004\010\124\001\002\000\010\004\uffe5\010\uffe5\015" +
    "\uffe5\001\002\000\004\044\126\001\002\000\010\033\uffe4" +
    "\034\uffe4\035\uffe4\001\002\000\004\044\130\001\002\000" +
    "\010\033\uffe3\034\uffe3\035\uffe3\001\002\000\010\033\uffe2" +
    "\034\uffe2\035\uffe2\001\002\000\004\014\136\001\002\000" +
    "\014\014\uffe7\015\134\034\063\035\062\036\064\001\002" +
    "\000\012\007\037\011\044\044\042\045\046\001\002\000" +
    "\004\014\uffe6\001\002\000\004\004\137\001\002\000\020" +
    "\012\uffbb\017\uffbb\020\uffbb\021\uffbb\027\uffbb\031\uffbb\032" +
    "\uffbb\001\002\000\020\012\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\027\uffb9\031\uffb9\032\uffb9\001\002\000\020\012\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\027\uffb8\031\uffb8\032\uffb8\001\002" +
    "\000\012\014\143\034\063\035\062\036\064\001\002\000" +
    "\004\033\144\001\002\000\004\045\145\001\002\000\004" +
    "\004\146\001\002\000\020\012\uffba\017\uffba\020\uffba\021" +
    "\uffba\027\uffba\031\uffba\032\uffba\001\002\000\020\012\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\027\uffb3\031\uffb3\032\uffb3\001" +
    "\002\000\014\006\151\007\037\011\044\044\153\045\046" +
    "\001\002\000\004\044\165\001\002\000\012\010\163\034" +
    "\063\035\062\036\064\001\002\000\014\010\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\043\157\001\002\000\004\010\155\001" +
    "\002\000\004\004\156\001\002\000\020\012\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\027\uffb2\031\uffb2\032\uffb2\001\002\000" +
    "\014\006\151\007\037\011\044\044\153\045\046\001\002" +
    "\000\012\010\uffac\034\063\035\062\036\064\001\002\000" +
    "\004\010\uffad\001\002\000\004\010\uffab\001\002\000\004" +
    "\004\164\001\002\000\020\012\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\027\uffb1\031\uffb1\032\uffb1\001\002\000\006\003\167" +
    "\006\166\001\002\000\006\010\uffb0\043\170\001\002\000" +
    "\004\010\uffaf\001\002\000\014\006\151\007\037\011\044" +
    "\044\153\045\046\001\002\000\004\010\uffae\001\002\000" +
    "\006\017\175\044\174\001\002\000\004\010\231\001\002" +
    "\000\004\033\223\001\002\000\004\044\176\001\002\000" +
    "\004\033\177\001\002\000\004\045\200\001\002\000\004" +
    "\016\201\001\002\000\006\042\203\044\204\001\002\000" +
    "\004\016\215\001\002\000\006\010\uffce\016\uffce\001\002" +
    "\000\004\041\205\001\002\000\012\006\207\042\210\044" +
    "\211\045\206\001\002\000\006\010\uffcc\016\uffcc\001\002" +
    "\000\006\006\212\044\213\001\002\000\006\010\uffcd\016" +
    "\uffcd\001\002\000\006\010\uffcb\016\uffcb\001\002\000\006" +
    "\010\uffca\016\uffca\001\002\000\004\006\214\001\002\000" +
    "\006\010\uffc9\016\uffc9\001\002\000\006\040\220\044\217" +
    "\001\002\000\004\010\uffc5\001\002\000\004\040\222\001" +
    "\002\000\004\044\221\001\002\000\004\010\uffc2\001\002" +
    "\000\004\010\uffc3\001\002\000\004\045\224\001\002\000" +
    "\004\016\225\001\002\000\006\042\203\044\204\001\002" +
    "\000\004\016\227\001\002\000\006\040\220\044\217\001" +
    "\002\000\004\010\uffc4\001\002\000\004\011\232\001\002" +
    "\000\004\004\233\001\002\000\022\017\021\020\015\021" +
    "\024\023\026\027\013\031\011\032\025\044\027\001\002" +
    "\000\020\012\242\017\021\020\015\021\024\027\013\031" +
    "\011\032\025\001\002\000\020\012\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\027\ufff8\031\ufff8\032\ufff8\001\002\000\020\012" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\027\ufff6\031\ufff6\032\ufff6" +
    "\001\002\000\020\012\ufffe\017\ufffe\020\ufffe\021\ufffe\027" +
    "\ufffe\031\ufffe\032\ufffe\001\002\000\020\012\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\027\ufffa\031\ufffa\032\ufffa\001\002\000" +
    "\020\012\ufffc\017\ufffc\020\ufffc\021\ufffc\027\ufffc\031\ufffc" +
    "\032\ufffc\001\002\000\004\004\243\001\002\000\020\012" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\027\uffc6\031\uffc6\032\uffc6" +
    "\001\002\000\004\033\252\001\002\000\006\004\246\033" +
    "\247\001\002\000\020\012\uffef\017\uffef\020\uffef\021\uffef" +
    "\027\uffef\031\uffef\032\uffef\001\002\000\004\042\250\001" +
    "\002\000\004\004\251\001\002\000\020\012\uffee\017\uffee" +
    "\020\uffee\021\uffee\027\uffee\031\uffee\032\uffee\001\002\000" +
    "\004\042\253\001\002\000\004\004\254\001\002\000\020" +
    "\012\uffed\017\uffed\020\uffed\021\uffed\027\uffed\031\uffed\032" +
    "\uffed\001\002\000\006\003\256\026\257\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\000\001\002\000\006\004" +
    "\261\033\262\001\002\000\020\012\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\027\ufff2\031\ufff2\032\ufff2\001\002\000\014\007" +
    "\037\011\044\013\263\044\042\045\046\001\002\000\012" +
    "\007\037\011\044\044\042\045\046\001\002\000\012\004" +
    "\265\034\063\035\062\036\064\001\002\000\020\012\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\027\ufff0\031\ufff0\032\ufff0\001" +
    "\002\000\004\014\267\001\002\000\004\004\270\001\002" +
    "\000\020\012\ufff1\017\ufff1\020\ufff1\021\ufff1\027\ufff1\031" +
    "\ufff1\032\ufff1\001\002\000\006\004\272\033\273\001\002" +
    "\000\020\012\uffec\017\uffec\020\uffec\021\uffec\027\uffec\031" +
    "\uffec\032\uffec\001\002\000\010\006\275\022\036\024\040" +
    "\001\002\000\004\004\305\001\002\000\006\006\300\044" +
    "\301\001\002\000\004\004\277\001\002\000\020\012\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\027\uffe9\031\uffe9\032\uffe9\001" +
    "\002\000\004\004\304\001\002\000\004\006\302\001\002" +
    "\000\004\004\303\001\002\000\020\012\uffea\017\uffea\020" +
    "\uffea\021\uffea\027\uffea\031\uffea\032\uffea\001\002\000\020" +
    "\012\uffeb\017\uffeb\020\uffeb\021\uffeb\027\uffeb\031\uffeb\032" +
    "\uffeb\001\002\000\020\012\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\027\uffe8\031\uffe8\032\uffe8\001\002\000\010\003\310\042" +
    "\203\044\204\001\002\000\004\010\317\001\002\000\004" +
    "\010\311\001\002\000\004\011\312\001\002\000\004\004" +
    "\313\001\002\000\022\017\021\020\015\021\024\023\026" +
    "\027\013\031\011\032\025\044\027\001\002\000\020\012" +
    "\315\017\021\020\015\021\024\027\013\031\011\032\025" +
    "\001\002\000\004\004\316\001\002\000\020\012\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\027\uffd1\031\uffd1\032\uffd1\001\002" +
    "\000\006\003\321\011\320\001\002\000\004\004\326\001" +
    "\002\000\004\004\322\001\002\000\022\017\021\020\015" +
    "\021\024\023\026\027\013\031\011\032\025\044\027\001" +
    "\002\000\020\012\324\017\021\020\015\021\024\027\013" +
    "\031\011\032\025\001\002\000\004\004\325\001\002\000" +
    "\020\012\uffd0\017\uffd0\020\uffd0\021\uffd0\027\uffd0\031\uffd0" +
    "\032\uffd0\001\002\000\024\003\330\017\021\020\015\021" +
    "\024\023\026\027\013\031\011\032\025\044\027\001\002" +
    "\000\020\012\333\017\021\020\015\021\024\027\013\031" +
    "\011\032\025\001\002\000\004\012\331\001\002\000\004" +
    "\004\332\001\002\000\020\012\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\027\uffcf\031\uffcf\032\uffcf\001\002\000\006\004\334" +
    "\030\335\001\002\000\020\012\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\027\uffd2\031\uffd2\032\uffd2\001\002\000\004\011\336" +
    "\001\002\000\004\004\337\001\002\000\022\017\021\020" +
    "\015\021\024\023\026\027\013\031\011\032\025\044\027" +
    "\001\002\000\020\012\341\017\021\020\015\021\024\027" +
    "\013\031\011\032\025\001\002\000\004\004\342\001\002" +
    "\000\020\012\uffc8\017\uffc8\020\uffc8\021\uffc8\027\uffc8\031" +
    "\uffc8\032\uffc8\001\002\000\006\042\203\044\204\001\002" +
    "\000\004\010\345\001\002\000\004\011\346\001\002\000" +
    "\004\004\347\001\002\000\022\017\021\020\015\021\024" +
    "\023\026\027\013\031\011\032\025\044\027\001\002\000" +
    "\020\012\351\017\021\020\015\021\024\027\013\031\011" +
    "\032\025\001\002\000\004\004\352\001\002\000\020\012" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\027\uffc7\031\uffc7\032\uffc7" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\022\004\013" +
    "\006\021\007\017\010\007\011\011\025\015\026\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\236\006\240\007" +
    "\237\010\234\011\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\042\020\141\001\001\000\012\015\044" +
    "\017\042\020\033\021\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\131\017\042\020\132\001\001" +
    "\000\002\001\001\000\006\017\042\020\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\042\020\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\042\020\071\001\001\000\006\017\042\020\067\001\001" +
    "\000\006\017\042\020\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\075\023\077\024\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\075\023\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\134" +
    "\017\042\020\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\042\020\151\027\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\042\020\157\022" +
    "\160\027\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\042\020\157\022\170\027\161\001\001\000\002\001" +
    "\001\000\004\013\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\225\001\001\000\002\001\001\000\004\005\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\233\004\013\006\021\007\017\010\007\011" +
    "\011\025\015\026\016\001\001\000\014\004\236\006\240" +
    "\007\237\010\234\011\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\042\020\263\001\001\000\010\014\265" +
    "\017\042\020\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\273\021" +
    "\275\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\306\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\313\004\013\006\021\007\017\010\007\011" +
    "\011\025\015\026\016\001\001\000\014\004\236\006\240" +
    "\007\237\010\234\011\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\322\004\013\006\021\007\017\010" +
    "\007\011\011\025\015\026\016\001\001\000\014\004\236" +
    "\006\240\007\237\010\234\011\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\326\004\013\006\021" +
    "\007\017\010\007\011\011\025\015\026\016\001\001\000" +
    "\014\004\236\006\240\007\237\010\234\011\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\337\004\013\006\021\007\017\010" +
    "\007\011\011\025\015\026\016\001\001\000\014\004\236" +
    "\006\240\007\237\010\234\011\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\343\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\347\004\013\006\021\007\017\010\007\011\011\025\015" +
    "\026\016\001\001\000\014\004\236\006\240\007\237\010" +
    "\234\011\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(java_cup.runtime.Symbol cur_token){
        // CUP ya tiene las posiciones exactas en cur_token.left y cur_token.right
        int linea = cur_token.right + 1;   // columna final del token
        int columna = cur_token.left + 1;  // columna inicial del token
        String lexema = (cur_token.value != null) ? cur_token.value.toString() : "EOF";

        // CUP construye el mensaje listo en texto
        Errores.add("Error de sintaxis: Línea " + linea +
                    ", Columna " + columna +
                    ", Texto: \"" + lexema + "\"");
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION_MENSAJES ::= MENSAJE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MENSAJES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION_MENSAJES ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MENSAJES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MENSAJE ::= Identificador Concatenacion EXPRESION_MENSAJES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MENSAJE ::= Comillas Identificador Comillas Concatenacion EXPRESION_MENSAJES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MENSAJE ::= Comillas Identificador error 
            {
              Object RESULT =null;
		 
           Errores.add("True \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MENSAJE ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MOSTRAR ::= Mostrar Parentesis_a OPERACION Parentesis_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOSTRAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MOSTRAR ::= Mostrar Parentesis_a MENSAJE Parentesis_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOSTRAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_SIMPLE ::= Identificador Op_relacional Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_SIMPLE ::= Identificador Igual RESOLVER Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_SIMPLE ::= Identificador Igual ECUACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_SIMPLE ::= Identificador Igual Comillas Identificador Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_SIMPLE ::= Identificador Igual Comillas Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_SIMPLE ::= Identificador Igual Op_booleano Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_SIMPLE ::= Identificador Igual OPERACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_SIMPLE ::= Identificador Corchete_a OPERACION Corchete_c Igual Numero Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_SIMPLE ::= Identificador Igual Corchete_a LISTA_NUMEROS Corchete_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTA_IDENTIFICADORES ::= Identificador Coma LISTA_IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LISTA_IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LISTA_ECUACIONES ::= ECUACION Coma LISTA_ECUACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ECUACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LISTA_ECUACIONES ::= ECUACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ECUACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RESOLVER ::= ResolverSistema Parentesis_a LISTA_IDENTIFICADORES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESOLVER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RESOLVER ::= ResolverSistema Parentesis_a LISTA_ECUACIONES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESOLVER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_FOR ::= Num Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Else Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea error Llave_c Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una sentencia entre las llaves \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c error Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una llave despues del ultimo parentesis \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF ::= If Parentesis_a error Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una condicion entre los parentesis \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION ::= Llave_a error Llave_c 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una operacion entre las llaves \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION ::= Llave_a OPERACION error 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una llave al final \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION ::= Llave_a OPERACION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION ::= Parentesis_a error Parentesis_c 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una operacion entre los parentesis \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION ::= Parentesis_a OPERACION error 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera un parentesis al final \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION ::= Parentesis_a OPERACION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION ::= OPERACION Multiplicacion error 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una operacion al final \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION ::= OPERACION Multiplicacion OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION ::= OPERACION Resta error 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una operacion al final \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION ::= OPERACION Resta OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION ::= OPERACION Suma error 
            {
              Object RESULT =null;
		 
           Errores.add("Se espera una operacion al final \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION ::= OPERACION Suma OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TERMINO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TERMINO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= Numero Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPRESION Resta Numero Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION Suma Numero Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ECUACION ::= Ecuacion Parentesis_a EXPRESION Igual Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ECUACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_NUMEROS ::= OPERACION Coma LISTA_NUMEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_NUMEROS ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Cadena Identificador Igual ECUACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Cadena Identificador Igual RESOLVER Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Cadena Identificador Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Bool error Igual Op_booleano Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba un identificador despues de Bool\n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Bool Identificador Igual Op_booleano Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Bool Identificador Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Num Identificador Igual OPERACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Num Identificador Igual Corchete_a LISTA_NUMEROS Corchete_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= Num Identificador Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= MOSTRAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Inicio Llave_a Linea SENTENCIA Llave_c error 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba Fin despues del corchete \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Inicio Llave_a Linea SENTENCIA Llave_c Fin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

