
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Aug 30 11:26:10 CST 2025
//----------------------------------------------------

package analizadorlexico;

import java_cup.runtime.Symbol;
import analizadorlexico.Errores;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Aug 30 11:26:10 CST 2025
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\004" +
    "\005\000\002\004\011\000\002\004\007\000\002\004\005" +
    "\000\002\004\007\000\002\004\007\000\002\004\005\000" +
    "\002\004\010\000\002\004\011\000\002\004\007\000\002" +
    "\004\007\000\002\014\003\000\002\014\005\000\002\015" +
    "\010\000\002\016\006\000\002\016\006\000\002\016\004" +
    "\000\002\017\003\000\002\017\003\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\003\000\002\006\013\000\002\012" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\006\000\002\012\007\000\002\007\020\000" +
    "\002\010\013\000\002\011\013\000\002\013\012\000\002" +
    "\013\011\000\002\005\004\000\002\005\004\000\002\021" +
    "\006\000\002\021\006\000\002\023\003\000\002\023\005" +
    "\000\002\024\003\000\002\024\005\000\002\025\010\000" +
    "\002\025\011\000\002\025\006\000\002\025\006\000\002" +
    "\025\007\000\002\025\010\000\002\025\006\000\002\025" +
    "\006\000\002\025\005\000\002\026\007\000\002\026\007" +
    "\000\002\027\005\000\002\027\007\000\002\027\005\000" +
    "\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\024\005\001\002\000\004\002\322\001" +
    "\002\000\004\010\006\001\002\000\004\004\007\001\002" +
    "\000\022\016\021\017\015\020\024\022\027\026\013\030" +
    "\012\031\025\043\026\001\002\000\020\011\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\026\ufff7\030\ufff7\031\ufff7\001\002\000" +
    "\020\011\ufff5\016\ufff5\017\ufff5\020\ufff5\026\ufff5\030\ufff5" +
    "\031\ufff5\001\002\000\004\006\312\001\002\000\004\006" +
    "\274\001\002\000\020\011\ufffd\016\ufffd\017\ufffd\020\ufffd" +
    "\026\ufffd\030\ufffd\031\ufffd\001\002\000\004\043\257\001" +
    "\002\000\020\011\ufff4\016\ufff4\017\ufff4\020\ufff4\026\ufff4" +
    "\030\ufff4\031\ufff4\001\002\000\020\011\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\026\ufff3\030\ufff3\031\ufff3\001\002\000\020" +
    "\011\ufff9\016\ufff9\017\ufff9\020\ufff9\026\ufff9\030\ufff9\031" +
    "\ufff9\001\002\000\004\043\246\001\002\000\020\011\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\026\ufffb\030\ufffb\031\ufffb\001" +
    "\002\000\020\011\243\016\021\017\015\020\024\026\013" +
    "\030\012\031\025\001\002\000\006\003\232\043\233\001" +
    "\002\000\004\006\160\001\002\000\010\012\071\032\072" +
    "\040\070\001\002\000\004\006\030\001\002\000\014\005" +
    "\032\006\033\010\034\043\037\044\031\001\002\000\022" +
    "\004\uffe1\007\uffe1\011\uffe1\013\uffe1\014\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\001\002\000\004\043\064\001\002\000\012" +
    "\006\033\010\034\043\053\044\031\001\002\000\012\006" +
    "\033\010\034\043\053\044\031\001\002\000\022\004\uffda" +
    "\007\uffda\011\uffda\013\uffda\014\uffda\033\uffda\034\uffda\035" +
    "\uffda\001\002\000\012\007\056\033\050\034\047\035\051" +
    "\001\002\000\014\007\uffe0\033\uffe0\034\uffe0\035\uffe0\042" +
    "\043\001\002\000\004\007\041\001\002\000\004\004\042" +
    "\001\002\000\020\011\uffbc\016\uffbc\017\uffbc\020\uffbc\026" +
    "\uffbc\030\uffbc\031\uffbc\001\002\000\014\005\032\006\033" +
    "\010\034\043\037\044\031\001\002\000\012\007\uffb7\033" +
    "\050\034\047\035\051\001\002\000\004\007\uffb8\001\002" +
    "\000\004\007\uffb6\001\002\000\012\006\033\010\034\043" +
    "\053\044\031\001\002\000\012\006\033\010\034\043\053" +
    "\044\031\001\002\000\012\006\033\010\034\043\053\044" +
    "\031\001\002\000\022\004\uffdd\007\uffdd\011\uffdd\013\uffdd" +
    "\014\uffdd\033\uffdd\034\uffdd\035\uffdd\001\002\000\022\004" +
    "\uffe0\007\uffe0\011\uffe0\013\uffe0\014\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\001\002\000\022\004\uffdf\007\uffdf\011\uffdf\013" +
    "\uffdf\014\uffdf\033\uffdf\034\uffdf\035\051\001\002\000\022" +
    "\004\uffde\007\uffde\011\uffde\013\uffde\014\uffde\033\uffde\034" +
    "\uffde\035\051\001\002\000\004\004\057\001\002\000\020" +
    "\011\uffbb\016\uffbb\017\uffbb\020\uffbb\026\uffbb\030\uffbb\031" +
    "\uffbb\001\002\000\012\011\061\033\050\034\047\035\051" +
    "\001\002\000\022\004\uffdb\007\uffdb\011\uffdb\013\uffdb\014" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\001\002\000\012\007\063" +
    "\033\050\034\047\035\051\001\002\000\022\004\uffdc\007" +
    "\uffdc\011\uffdc\013\uffdc\014\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\001\002\000\004\005\065\001\002\000\006\007\uffba\042" +
    "\066\001\002\000\014\005\032\006\033\010\034\043\037" +
    "\044\031\001\002\000\004\007\uffb9\001\002\000\004\004" +
    "\157\001\002\000\012\006\033\010\034\043\053\044\031" +
    "\001\002\000\024\005\102\006\033\010\034\012\075\021" +
    "\076\023\077\041\073\043\053\044\031\001\002\000\004" +
    "\004\151\001\002\000\012\004\150\033\050\034\047\035" +
    "\051\001\002\000\012\006\033\010\034\043\053\044\031" +
    "\001\002\000\004\006\125\001\002\000\004\006\112\001" +
    "\002\000\004\004\111\001\002\000\004\004\110\001\002" +
    "\000\006\005\103\043\104\001\002\000\004\004\107\001" +
    "\002\000\004\005\105\001\002\000\004\004\106\001\002" +
    "\000\020\011\uffc0\016\uffc0\017\uffc0\020\uffc0\026\uffc0\030" +
    "\uffc0\031\uffc0\001\002\000\020\011\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\026\uffc1\030\uffc1\031\uffc1\001\002\000\020\011" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\026\uffbf\030\uffbf\031\uffbf" +
    "\001\002\000\020\011\uffbe\016\uffbe\017\uffbe\020\uffbe\026" +
    "\uffbe\030\uffbe\031\uffbe\001\002\000\006\021\076\043\116" +
    "\001\002\000\004\007\124\001\002\000\006\007\uffc9\014" +
    "\122\001\002\000\004\007\121\001\002\000\006\007\uffc7" +
    "\014\117\001\002\000\004\043\116\001\002\000\004\007" +
    "\uffc6\001\002\000\004\004\uffcb\001\002\000\004\021\076" +
    "\001\002\000\004\007\uffc8\001\002\000\004\004\uffca\001" +
    "\002\000\004\044\126\001\002\000\004\043\141\001\002" +
    "\000\010\032\132\033\131\034\130\001\002\000\004\044" +
    "\137\001\002\000\004\044\135\001\002\000\004\044\133" +
    "\001\002\000\004\007\134\001\002\000\010\004\uffe5\007" +
    "\uffe5\014\uffe5\001\002\000\004\043\136\001\002\000\010" +
    "\032\uffe4\033\uffe4\034\uffe4\001\002\000\004\043\140\001" +
    "\002\000\010\032\uffe3\033\uffe3\034\uffe3\001\002\000\010" +
    "\032\uffe2\033\uffe2\034\uffe2\001\002\000\004\013\146\001" +
    "\002\000\014\013\uffe7\014\144\033\050\034\047\035\051" +
    "\001\002\000\012\006\033\010\034\043\053\044\031\001" +
    "\002\000\004\013\uffe6\001\002\000\004\004\147\001\002" +
    "\000\020\011\uffc5\016\uffc5\017\uffc5\020\uffc5\026\uffc5\030" +
    "\uffc5\031\uffc5\001\002\000\020\011\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\026\uffc3\030\uffc3\031\uffc3\001\002\000\020\011" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\026\uffc2\030\uffc2\031\uffc2" +
    "\001\002\000\012\013\153\033\050\034\047\035\051\001" +
    "\002\000\004\032\154\001\002\000\004\044\155\001\002" +
    "\000\004\004\156\001\002\000\020\011\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\026\uffc4\030\uffc4\031\uffc4\001\002\000\020" +
    "\011\uffbd\016\uffbd\017\uffbd\020\uffbd\026\uffbd\030\uffbd\031" +
    "\uffbd\001\002\000\006\016\163\043\162\001\002\000\004" +
    "\007\217\001\002\000\004\032\211\001\002\000\004\043" +
    "\164\001\002\000\004\032\165\001\002\000\004\044\166" +
    "\001\002\000\004\015\167\001\002\000\006\041\171\043" +
    "\172\001\002\000\004\015\203\001\002\000\006\007\uffd8" +
    "\015\uffd8\001\002\000\004\040\173\001\002\000\012\005" +
    "\175\041\176\043\177\044\174\001\002\000\006\007\uffd6" +
    "\015\uffd6\001\002\000\006\005\200\043\201\001\002\000" +
    "\006\007\uffd7\015\uffd7\001\002\000\006\007\uffd5\015\uffd5" +
    "\001\002\000\006\007\uffd4\015\uffd4\001\002\000\004\005" +
    "\202\001\002\000\006\007\uffd3\015\uffd3\001\002\000\006" +
    "\037\205\043\206\001\002\000\004\007\uffcf\001\002\000" +
    "\004\043\210\001\002\000\004\037\207\001\002\000\004" +
    "\007\uffcd\001\002\000\004\007\uffcc\001\002\000\004\044" +
    "\212\001\002\000\004\015\213\001\002\000\006\041\171" +
    "\043\172\001\002\000\004\015\215\001\002\000\006\037" +
    "\205\043\206\001\002\000\004\007\uffce\001\002\000\004" +
    "\010\220\001\002\000\004\004\221\001\002\000\022\016" +
    "\021\017\015\020\024\022\027\026\013\030\012\031\025" +
    "\043\026\001\002\000\020\011\230\016\021\017\015\020" +
    "\024\026\013\030\012\031\025\001\002\000\020\011\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\026\ufff8\030\ufff8\031\ufff8\001" +
    "\002\000\020\011\ufff6\016\ufff6\017\ufff6\020\ufff6\026\ufff6" +
    "\030\ufff6\031\ufff6\001\002\000\020\011\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\026\ufffe\030\ufffe\031\ufffe\001\002\000\020" +
    "\011\ufffa\016\ufffa\017\ufffa\020\ufffa\026\ufffa\030\ufffa\031" +
    "\ufffa\001\002\000\020\011\ufffc\016\ufffc\017\ufffc\020\ufffc" +
    "\026\ufffc\030\ufffc\031\ufffc\001\002\000\004\004\231\001" +
    "\002\000\020\011\uffd0\016\uffd0\017\uffd0\020\uffd0\026\uffd0" +
    "\030\uffd0\031\uffd0\001\002\000\004\032\240\001\002\000" +
    "\006\004\234\032\235\001\002\000\020\011\uffef\016\uffef" +
    "\017\uffef\020\uffef\026\uffef\030\uffef\031\uffef\001\002\000" +
    "\004\041\236\001\002\000\004\004\237\001\002\000\020" +
    "\011\uffee\016\uffee\017\uffee\020\uffee\026\uffee\030\uffee\031" +
    "\uffee\001\002\000\004\041\241\001\002\000\004\004\242" +
    "\001\002\000\020\011\uffed\016\uffed\017\uffed\020\uffed\026" +
    "\uffed\030\uffed\031\uffed\001\002\000\006\003\244\025\245" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\000\001" +
    "\002\000\006\004\247\032\250\001\002\000\020\011\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\026\ufff2\030\ufff2\031\ufff2\001" +
    "\002\000\014\006\033\010\034\012\251\043\053\044\031" +
    "\001\002\000\012\006\033\010\034\043\053\044\031\001" +
    "\002\000\012\004\253\033\050\034\047\035\051\001\002" +
    "\000\020\011\ufff0\016\ufff0\017\ufff0\020\ufff0\026\ufff0\030" +
    "\ufff0\031\ufff0\001\002\000\004\013\255\001\002\000\004" +
    "\004\256\001\002\000\020\011\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\026\ufff1\030\ufff1\031\ufff1\001\002\000\006\004\260" +
    "\032\261\001\002\000\020\011\uffec\016\uffec\017\uffec\020" +
    "\uffec\026\uffec\030\uffec\031\uffec\001\002\000\010\005\263" +
    "\021\076\023\077\001\002\000\004\004\273\001\002\000" +
    "\006\005\266\043\267\001\002\000\004\004\265\001\002" +
    "\000\020\011\uffe9\016\uffe9\017\uffe9\020\uffe9\026\uffe9\030" +
    "\uffe9\031\uffe9\001\002\000\004\004\272\001\002\000\004" +
    "\005\270\001\002\000\004\004\271\001\002\000\020\011" +
    "\uffea\016\uffea\017\uffea\020\uffea\026\uffea\030\uffea\031\uffea" +
    "\001\002\000\020\011\uffeb\016\uffeb\017\uffeb\020\uffeb\026" +
    "\uffeb\030\uffeb\031\uffeb\001\002\000\020\011\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\026\uffe8\030\uffe8\031\uffe8\001\002\000" +
    "\006\041\171\043\172\001\002\000\004\007\276\001\002" +
    "\000\004\010\277\001\002\000\004\004\300\001\002\000" +
    "\022\016\021\017\015\020\024\022\027\026\013\030\012" +
    "\031\025\043\026\001\002\000\020\011\302\016\021\017" +
    "\015\020\024\026\013\030\012\031\025\001\002\000\006" +
    "\004\303\027\304\001\002\000\020\011\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\026\uffd9\030\uffd9\031\uffd9\001\002\000\004" +
    "\010\305\001\002\000\004\004\306\001\002\000\022\016" +
    "\021\017\015\020\024\022\027\026\013\030\012\031\025" +
    "\043\026\001\002\000\020\011\310\016\021\017\015\020" +
    "\024\026\013\030\012\031\025\001\002\000\004\004\311" +
    "\001\002\000\020\011\uffd2\016\uffd2\017\uffd2\020\uffd2\026" +
    "\uffd2\030\uffd2\031\uffd2\001\002\000\006\041\171\043\172" +
    "\001\002\000\004\007\314\001\002\000\004\010\315\001" +
    "\002\000\004\004\316\001\002\000\022\016\021\017\015" +
    "\020\024\022\027\026\013\030\012\031\025\043\026\001" +
    "\002\000\020\011\320\016\021\017\015\020\024\026\013" +
    "\030\012\031\025\001\002\000\004\004\321\001\002\000" +
    "\020\011\uffd1\016\uffd1\017\uffd1\020\uffd1\026\uffd1\030\uffd1" +
    "\031\uffd1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\022\004\013" +
    "\006\021\007\017\010\007\011\010\025\015\026\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\224\006\226\007" +
    "\225\010\222\011\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\034\020\035\027\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\034\020\061\001\001\000\006\017" +
    "\034\020\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\034\020\043\022\044\027\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\034\020\054\001\001\000\006\017\034" +
    "\020\053\001\001\000\006\017\034\020\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\034\020" +
    "\043\022\066\027\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\034\020\151\001\001\000\012\015" +
    "\100\017\034\020\073\021\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\141\017\034\020\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\113\023\114\024\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\113\023\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\144\017\034\020\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\213\001\001\000\002\001\001\000\004\005\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\221\004\013\006\021\007\017\010\007\011\010" +
    "\025\015\026\016\001\001\000\014\004\224\006\226\007" +
    "\225\010\222\011\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\034\020\251\001\001\000\010\014\253\017" +
    "\034\020\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\261\021\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\274\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\300\004" +
    "\013\006\021\007\017\010\007\011\010\025\015\026\016" +
    "\001\001\000\014\004\224\006\226\007\225\010\222\011" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\306\004\013\006" +
    "\021\007\017\010\007\011\010\025\015\026\016\001\001" +
    "\000\014\004\224\006\226\007\225\010\222\011\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\316\004\013\006\021\007\017\010\007" +
    "\011\010\025\015\026\016\001\001\000\014\004\224\006" +
    "\226\007\225\010\222\011\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION_MENSAJES ::= MENSAJE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MENSAJES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION_MENSAJES ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MENSAJES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MENSAJE ::= Identificador Concatenacion EXPRESION_MENSAJES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MENSAJE ::= Comillas Identificador Comillas Concatenacion EXPRESION_MENSAJES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MENSAJE ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MOSTRAR ::= Mostrar Parentesis_a OPERACION Parentesis_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOSTRAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MOSTRAR ::= Mostrar Parentesis_a MENSAJE Parentesis_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOSTRAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_SIMPLE ::= Identificador Op_relacional Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_SIMPLE ::= Identificador Igual RESOLVER Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_SIMPLE ::= Identificador Igual ECUACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_SIMPLE ::= Identificador Igual Comillas Identificador Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_SIMPLE ::= Identificador Igual Comillas Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_SIMPLE ::= Identificador Igual Op_booleano Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_SIMPLE ::= Identificador Igual OPERACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_SIMPLE ::= Identificador Corchete_a OPERACION Corchete_c Igual Numero Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_SIMPLE ::= Identificador Igual Corchete_a LISTA_NUMEROS Corchete_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_IDENTIFICADORES ::= Identificador Coma LISTA_IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LISTA_IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LISTA_ECUACIONES ::= ECUACION Coma LISTA_ECUACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ECUACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LISTA_ECUACIONES ::= ECUACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ECUACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RESOLVER ::= ResolverSistema Parentesis_a LISTA_IDENTIFICADORES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESOLVER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RESOLVER ::= ResolverSistema Parentesis_a LISTA_ECUACIONES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESOLVER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_FOR ::= Num Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Else Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION ::= Llave_a OPERACION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION ::= Parentesis_a OPERACION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION ::= OPERACION Multiplicacion OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION ::= OPERACION Resta OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION ::= OPERACION Suma OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TERMINO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TERMINO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= Numero Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPRESION Resta Numero Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION Suma Numero Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ECUACION ::= Ecuacion Parentesis_a EXPRESION Igual Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ECUACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_NUMEROS ::= OPERACION Coma LISTA_NUMEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_NUMEROS ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Cadena Identificador Igual ECUACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Cadena Identificador Igual RESOLVER Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Cadena Identificador Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Bool error Igual Op_booleano Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Identificador despues de Bool");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Bool Identificador Igual Op_booleano Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Bool Identificador Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Num Identificador Igual OPERACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Num Identificador Igual Corchete_a LISTA_NUMEROS Corchete_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= Num Identificador Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= MOSTRAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Inicio Llave_a Linea SENTENCIA Llave_c error 
            {
              Object RESULT =null;
		 
           Errores.add("FIN");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Inicio Llave_a Linea SENTENCIA Llave_c Fin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

