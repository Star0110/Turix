
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Aug 30 23:30:55 CST 2025
//----------------------------------------------------

package analizadorlexico;

import java_cup.runtime.Symbol;
import analizadorlexico.Errores;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Aug 30 23:30:55 CST 2025
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\004" +
    "\005\000\002\004\011\000\002\004\007\000\002\004\005" +
    "\000\002\004\007\000\002\004\007\000\002\004\005\000" +
    "\002\004\010\000\002\004\011\000\002\004\007\000\002" +
    "\004\007\000\002\014\003\000\002\014\005\000\002\015" +
    "\010\000\002\016\006\000\002\016\006\000\002\016\004" +
    "\000\002\017\003\000\002\017\003\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\003\000\002\006\013\000\002\012" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\006\000\002\012\007\000\002\007\020\000" +
    "\002\010\013\000\002\011\013\000\002\013\012\000\002" +
    "\013\011\000\002\005\004\000\002\005\004\000\002\021" +
    "\006\000\002\021\006\000\002\023\003\000\002\023\005" +
    "\000\002\024\003\000\002\024\005\000\002\025\010\000" +
    "\002\025\011\000\002\025\006\000\002\025\006\000\002" +
    "\025\007\000\002\025\010\000\002\025\006\000\002\025" +
    "\006\000\002\025\005\000\002\026\007\000\002\026\007" +
    "\000\002\027\005\000\002\027\005\000\002\027\007\000" +
    "\002\027\005\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\004\025\005\001\002\000\004\002\323\001" +
    "\002\000\004\011\006\001\002\000\004\004\007\001\002" +
    "\000\022\017\021\020\015\021\024\023\027\027\013\031" +
    "\012\032\025\044\026\001\002\000\020\012\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\027\ufff7\031\ufff7\032\ufff7\001\002\000" +
    "\020\012\ufff5\017\ufff5\020\ufff5\021\ufff5\027\ufff5\031\ufff5" +
    "\032\ufff5\001\002\000\004\007\313\001\002\000\004\007" +
    "\275\001\002\000\020\012\ufffd\017\ufffd\020\ufffd\021\ufffd" +
    "\027\ufffd\031\ufffd\032\ufffd\001\002\000\004\044\260\001" +
    "\002\000\020\012\ufff4\017\ufff4\020\ufff4\021\ufff4\027\ufff4" +
    "\031\ufff4\032\ufff4\001\002\000\020\012\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\027\ufff3\031\ufff3\032\ufff3\001\002\000\020" +
    "\012\ufff9\017\ufff9\020\ufff9\021\ufff9\027\ufff9\031\ufff9\032" +
    "\ufff9\001\002\000\004\044\247\001\002\000\020\012\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\027\ufffb\031\ufffb\032\ufffb\001" +
    "\002\000\020\012\244\017\021\020\015\021\024\027\013" +
    "\031\012\032\025\001\002\000\006\003\233\044\234\001" +
    "\002\000\004\007\161\001\002\000\010\013\072\033\073" +
    "\041\071\001\002\000\004\007\030\001\002\000\014\006" +
    "\032\007\033\011\034\044\037\045\031\001\002\000\022" +
    "\004\uffe1\010\uffe1\012\uffe1\014\uffe1\015\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\001\002\000\004\044\064\001\002\000\012" +
    "\007\033\011\034\044\053\045\031\001\002\000\012\007" +
    "\033\011\034\044\053\045\031\001\002\000\022\004\uffda" +
    "\010\uffda\012\uffda\014\uffda\015\uffda\034\uffda\035\uffda\036" +
    "\uffda\001\002\000\012\010\056\034\050\035\047\036\051" +
    "\001\002\000\014\010\uffe0\034\uffe0\035\uffe0\036\uffe0\043" +
    "\043\001\002\000\004\010\041\001\002\000\004\004\042" +
    "\001\002\000\020\012\uffbc\017\uffbc\020\uffbc\021\uffbc\027" +
    "\uffbc\031\uffbc\032\uffbc\001\002\000\014\006\032\007\033" +
    "\011\034\044\037\045\031\001\002\000\012\010\uffb6\034" +
    "\050\035\047\036\051\001\002\000\004\010\uffb7\001\002" +
    "\000\004\010\uffb5\001\002\000\012\007\033\011\034\044" +
    "\053\045\031\001\002\000\012\007\033\011\034\044\053" +
    "\045\031\001\002\000\012\007\033\011\034\044\053\045" +
    "\031\001\002\000\022\004\uffdd\010\uffdd\012\uffdd\014\uffdd" +
    "\015\uffdd\034\uffdd\035\uffdd\036\uffdd\001\002\000\022\004" +
    "\uffe0\010\uffe0\012\uffe0\014\uffe0\015\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\001\002\000\022\004\uffdf\010\uffdf\012\uffdf\014" +
    "\uffdf\015\uffdf\034\uffdf\035\uffdf\036\051\001\002\000\022" +
    "\004\uffde\010\uffde\012\uffde\014\uffde\015\uffde\034\uffde\035" +
    "\uffde\036\051\001\002\000\004\004\057\001\002\000\020" +
    "\012\uffbb\017\uffbb\020\uffbb\021\uffbb\027\uffbb\031\uffbb\032" +
    "\uffbb\001\002\000\012\012\061\034\050\035\047\036\051" +
    "\001\002\000\022\004\uffdb\010\uffdb\012\uffdb\014\uffdb\015" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\001\002\000\012\010\063" +
    "\034\050\035\047\036\051\001\002\000\022\004\uffdc\010" +
    "\uffdc\012\uffdc\014\uffdc\015\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\001\002\000\006\003\066\006\065\001\002\000\006\010" +
    "\uffba\043\067\001\002\000\004\010\uffb9\001\002\000\014" +
    "\006\032\007\033\011\034\044\037\045\031\001\002\000" +
    "\004\010\uffb8\001\002\000\004\004\160\001\002\000\012" +
    "\007\033\011\034\044\053\045\031\001\002\000\024\006" +
    "\103\007\033\011\034\013\076\022\077\024\100\042\074" +
    "\044\053\045\031\001\002\000\004\004\152\001\002\000" +
    "\012\004\151\034\050\035\047\036\051\001\002\000\012" +
    "\007\033\011\034\044\053\045\031\001\002\000\004\007" +
    "\126\001\002\000\004\007\113\001\002\000\004\004\112" +
    "\001\002\000\004\004\111\001\002\000\006\006\104\044" +
    "\105\001\002\000\004\004\110\001\002\000\004\006\106" +
    "\001\002\000\004\004\107\001\002\000\020\012\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\027\uffc0\031\uffc0\032\uffc0\001\002" +
    "\000\020\012\uffc1\017\uffc1\020\uffc1\021\uffc1\027\uffc1\031" +
    "\uffc1\032\uffc1\001\002\000\020\012\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\027\uffbf\031\uffbf\032\uffbf\001\002\000\020\012" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\027\uffbe\031\uffbe\032\uffbe" +
    "\001\002\000\006\022\077\044\117\001\002\000\004\010" +
    "\125\001\002\000\006\010\uffc9\015\123\001\002\000\004" +
    "\010\122\001\002\000\006\010\uffc7\015\120\001\002\000" +
    "\004\044\117\001\002\000\004\010\uffc6\001\002\000\004" +
    "\004\uffcb\001\002\000\004\022\077\001\002\000\004\010" +
    "\uffc8\001\002\000\004\004\uffca\001\002\000\004\045\127" +
    "\001\002\000\004\044\142\001\002\000\010\033\133\034" +
    "\132\035\131\001\002\000\004\045\140\001\002\000\004" +
    "\045\136\001\002\000\004\045\134\001\002\000\004\010" +
    "\135\001\002\000\010\004\uffe5\010\uffe5\015\uffe5\001\002" +
    "\000\004\044\137\001\002\000\010\033\uffe4\034\uffe4\035" +
    "\uffe4\001\002\000\004\044\141\001\002\000\010\033\uffe3" +
    "\034\uffe3\035\uffe3\001\002\000\010\033\uffe2\034\uffe2\035" +
    "\uffe2\001\002\000\004\014\147\001\002\000\014\014\uffe7" +
    "\015\145\034\050\035\047\036\051\001\002\000\012\007" +
    "\033\011\034\044\053\045\031\001\002\000\004\014\uffe6" +
    "\001\002\000\004\004\150\001\002\000\020\012\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\027\uffc5\031\uffc5\032\uffc5\001\002" +
    "\000\020\012\uffc3\017\uffc3\020\uffc3\021\uffc3\027\uffc3\031" +
    "\uffc3\032\uffc3\001\002\000\020\012\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\027\uffc2\031\uffc2\032\uffc2\001\002\000\012\014" +
    "\154\034\050\035\047\036\051\001\002\000\004\033\155" +
    "\001\002\000\004\045\156\001\002\000\004\004\157\001" +
    "\002\000\020\012\uffc4\017\uffc4\020\uffc4\021\uffc4\027\uffc4" +
    "\031\uffc4\032\uffc4\001\002\000\020\012\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\027\uffbd\031\uffbd\032\uffbd\001\002\000\006" +
    "\017\164\044\163\001\002\000\004\010\220\001\002\000" +
    "\004\033\212\001\002\000\004\044\165\001\002\000\004" +
    "\033\166\001\002\000\004\045\167\001\002\000\004\016" +
    "\170\001\002\000\006\042\172\044\173\001\002\000\004" +
    "\016\204\001\002\000\006\010\uffd8\016\uffd8\001\002\000" +
    "\004\041\174\001\002\000\012\006\176\042\177\044\200" +
    "\045\175\001\002\000\006\010\uffd6\016\uffd6\001\002\000" +
    "\006\006\201\044\202\001\002\000\006\010\uffd7\016\uffd7" +
    "\001\002\000\006\010\uffd5\016\uffd5\001\002\000\006\010" +
    "\uffd4\016\uffd4\001\002\000\004\006\203\001\002\000\006" +
    "\010\uffd3\016\uffd3\001\002\000\006\040\206\044\207\001" +
    "\002\000\004\010\uffcf\001\002\000\004\044\211\001\002" +
    "\000\004\040\210\001\002\000\004\010\uffcd\001\002\000" +
    "\004\010\uffcc\001\002\000\004\045\213\001\002\000\004" +
    "\016\214\001\002\000\006\042\172\044\173\001\002\000" +
    "\004\016\216\001\002\000\006\040\206\044\207\001\002" +
    "\000\004\010\uffce\001\002\000\004\011\221\001\002\000" +
    "\004\004\222\001\002\000\022\017\021\020\015\021\024" +
    "\023\027\027\013\031\012\032\025\044\026\001\002\000" +
    "\020\012\231\017\021\020\015\021\024\027\013\031\012" +
    "\032\025\001\002\000\020\012\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\027\ufff8\031\ufff8\032\ufff8\001\002\000\020\012\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\027\ufff6\031\ufff6\032\ufff6\001" +
    "\002\000\020\012\ufffe\017\ufffe\020\ufffe\021\ufffe\027\ufffe" +
    "\031\ufffe\032\ufffe\001\002\000\020\012\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\027\ufffa\031\ufffa\032\ufffa\001\002\000\020" +
    "\012\ufffc\017\ufffc\020\ufffc\021\ufffc\027\ufffc\031\ufffc\032" +
    "\ufffc\001\002\000\004\004\232\001\002\000\020\012\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\027\uffd0\031\uffd0\032\uffd0\001" +
    "\002\000\004\033\241\001\002\000\006\004\235\033\236" +
    "\001\002\000\020\012\uffef\017\uffef\020\uffef\021\uffef\027" +
    "\uffef\031\uffef\032\uffef\001\002\000\004\042\237\001\002" +
    "\000\004\004\240\001\002\000\020\012\uffee\017\uffee\020" +
    "\uffee\021\uffee\027\uffee\031\uffee\032\uffee\001\002\000\004" +
    "\042\242\001\002\000\004\004\243\001\002\000\020\012" +
    "\uffed\017\uffed\020\uffed\021\uffed\027\uffed\031\uffed\032\uffed" +
    "\001\002\000\006\003\245\026\246\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\000\001\002\000\006\004\250" +
    "\033\251\001\002\000\020\012\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\027\ufff2\031\ufff2\032\ufff2\001\002\000\014\007\033" +
    "\011\034\013\252\044\053\045\031\001\002\000\012\007" +
    "\033\011\034\044\053\045\031\001\002\000\012\004\254" +
    "\034\050\035\047\036\051\001\002\000\020\012\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\027\ufff0\031\ufff0\032\ufff0\001\002" +
    "\000\004\014\256\001\002\000\004\004\257\001\002\000" +
    "\020\012\ufff1\017\ufff1\020\ufff1\021\ufff1\027\ufff1\031\ufff1" +
    "\032\ufff1\001\002\000\006\004\261\033\262\001\002\000" +
    "\020\012\uffec\017\uffec\020\uffec\021\uffec\027\uffec\031\uffec" +
    "\032\uffec\001\002\000\010\006\264\022\077\024\100\001" +
    "\002\000\004\004\274\001\002\000\006\006\267\044\270" +
    "\001\002\000\004\004\266\001\002\000\020\012\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\027\uffe9\031\uffe9\032\uffe9\001\002" +
    "\000\004\004\273\001\002\000\004\006\271\001\002\000" +
    "\004\004\272\001\002\000\020\012\uffea\017\uffea\020\uffea" +
    "\021\uffea\027\uffea\031\uffea\032\uffea\001\002\000\020\012" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\027\uffeb\031\uffeb\032\uffeb" +
    "\001\002\000\020\012\uffe8\017\uffe8\020\uffe8\021\uffe8\027" +
    "\uffe8\031\uffe8\032\uffe8\001\002\000\006\042\172\044\173" +
    "\001\002\000\004\010\277\001\002\000\004\011\300\001" +
    "\002\000\004\004\301\001\002\000\022\017\021\020\015" +
    "\021\024\023\027\027\013\031\012\032\025\044\026\001" +
    "\002\000\020\012\303\017\021\020\015\021\024\027\013" +
    "\031\012\032\025\001\002\000\006\004\304\030\305\001" +
    "\002\000\020\012\uffd9\017\uffd9\020\uffd9\021\uffd9\027\uffd9" +
    "\031\uffd9\032\uffd9\001\002\000\004\011\306\001\002\000" +
    "\004\004\307\001\002\000\022\017\021\020\015\021\024" +
    "\023\027\027\013\031\012\032\025\044\026\001\002\000" +
    "\020\012\311\017\021\020\015\021\024\027\013\031\012" +
    "\032\025\001\002\000\004\004\312\001\002\000\020\012" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\027\uffd2\031\uffd2\032\uffd2" +
    "\001\002\000\006\042\172\044\173\001\002\000\004\010" +
    "\315\001\002\000\004\011\316\001\002\000\004\004\317" +
    "\001\002\000\022\017\021\020\015\021\024\023\027\027" +
    "\013\031\012\032\025\044\026\001\002\000\020\012\321" +
    "\017\021\020\015\021\024\027\013\031\012\032\025\001" +
    "\002\000\004\004\322\001\002\000\020\012\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\027\uffd1\031\uffd1\032\uffd1\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\022\004\013" +
    "\006\021\007\017\010\007\011\010\025\015\026\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\225\006\227\007" +
    "\226\010\223\011\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\034\020\035\027\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\034\020\061\001\001\000\006\017" +
    "\034\020\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\034\020\043\022\044\027\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\034\020\054\001\001\000\006\017\034" +
    "\020\053\001\001\000\006\017\034\020\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\034\020\043\022\067\027\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\034\020\152\001" +
    "\001\000\012\015\101\017\034\020\074\021\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\142\017" +
    "\034\020\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\114\023\115\024\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\114\023\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\145\017\034\020\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\214\001\001\000\002\001\001\000\004" +
    "\005\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\222\004\013\006\021\007\017" +
    "\010\007\011\010\025\015\026\016\001\001\000\014\004" +
    "\225\006\227\007\226\010\223\011\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\034\020\252\001\001\000" +
    "\010\014\254\017\034\020\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\262\021\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\275\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\301\004\013\006\021\007\017\010\007\011\010" +
    "\025\015\026\016\001\001\000\014\004\225\006\227\007" +
    "\226\010\223\011\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\307\004\013\006\021\007\017\010\007\011\010\025\015" +
    "\026\016\001\001\000\014\004\225\006\227\007\226\010" +
    "\223\011\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\317\004\013\006\021" +
    "\007\017\010\007\011\010\025\015\026\016\001\001\000" +
    "\014\004\225\006\227\007\226\010\223\011\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(java_cup.runtime.Symbol cur_token){
        // CUP ya tiene las posiciones exactas en cur_token.left y cur_token.right
        int linea = cur_token.right + 1;   // columna final del token
        int columna = cur_token.left + 1;  // columna inicial del token
        String lexema = (cur_token.value != null) ? cur_token.value.toString() : "EOF";

        // CUP construye el mensaje listo en texto
        Errores.add("Error de sintaxis: Línea " + linea +
                    ", Columna " + columna +
                    ", Texto: \"" + lexema + "\"");
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION_MENSAJES ::= MENSAJE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MENSAJES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION_MENSAJES ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MENSAJES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MENSAJE ::= Identificador Concatenacion EXPRESION_MENSAJES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MENSAJE ::= Comillas Identificador Comillas Concatenacion EXPRESION_MENSAJES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MENSAJE ::= Comillas Identificador error 
            {
              Object RESULT =null;
		 
           Errores.add("True \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MENSAJE ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MOSTRAR ::= Mostrar Parentesis_a OPERACION Parentesis_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOSTRAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MOSTRAR ::= Mostrar Parentesis_a MENSAJE Parentesis_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MOSTRAR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_SIMPLE ::= Identificador Op_relacional Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_SIMPLE ::= Identificador Igual RESOLVER Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_SIMPLE ::= Identificador Igual ECUACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_SIMPLE ::= Identificador Igual Comillas Identificador Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_SIMPLE ::= Identificador Igual Comillas Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_SIMPLE ::= Identificador Igual Op_booleano Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_SIMPLE ::= Identificador Igual OPERACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_SIMPLE ::= Identificador Corchete_a OPERACION Corchete_c Igual Numero Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_SIMPLE ::= Identificador Igual Corchete_a LISTA_NUMEROS Corchete_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SIMPLE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_IDENTIFICADORES ::= Identificador Coma LISTA_IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LISTA_IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LISTA_ECUACIONES ::= ECUACION Coma LISTA_ECUACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ECUACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LISTA_ECUACIONES ::= ECUACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ECUACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RESOLVER ::= ResolverSistema Parentesis_a LISTA_IDENTIFICADORES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESOLVER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RESOLVER ::= ResolverSistema Parentesis_a LISTA_ECUACIONES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESOLVER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_FOR ::= Num Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Else Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION ::= Llave_a OPERACION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION ::= Parentesis_a OPERACION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION ::= OPERACION Multiplicacion OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION ::= OPERACION Resta OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION ::= OPERACION Suma OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TERMINO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TERMINO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= Numero Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPRESION Resta Numero Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION Suma Numero Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ECUACION ::= Ecuacion Parentesis_a EXPRESION Igual Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ECUACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_NUMEROS ::= OPERACION Coma LISTA_NUMEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_NUMEROS ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Cadena Identificador Igual ECUACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Cadena Identificador Igual RESOLVER Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Cadena Identificador Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Bool error Igual Op_booleano Linea 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba un identificador despues de Bool\n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Bool Identificador Igual Op_booleano Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Bool Identificador Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Num Identificador Igual OPERACION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Num Identificador Igual Corchete_a LISTA_NUMEROS Corchete_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= Num Identificador Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= MOSTRAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Inicio Llave_a Linea SENTENCIA Llave_c error 
            {
              Object RESULT =null;
		 
           Errores.add("Se esperaba Fin despues del corchete \n");
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Inicio Llave_a Linea SENTENCIA Llave_c Fin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

