package analizadorlexico;

import java_cup.runtime.Symbol;
import analizadorlexico.Errores;

parser code
{:
    private Symbol s;
    
    public void syntax_error(java_cup.runtime.Symbol cur_token){
        // CUP ya tiene las posiciones exactas en cur_token.left y cur_token.right
        int linea = cur_token.right + 1;   // columna final del token
        int columna = cur_token.left + 1;  // columna inicial del token
        String lexema = (cur_token.value != null) ? cur_token.value.toString() : "EOF";

        // CUP construye el mensaje listo en texto
        Errores.add("Error de sintaxis: Línea " + linea +
                    ", Columna " + columna +
                    ", Texto: \"" + lexema + "\"");
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Linea,Symbol ,
    Comillas, Parentesis_a, Parentesis_c, Llave_a, Llave_c, Corchete_a, 
    Corchete_c, Coma, P_coma, Num, Cadena, Bool, Ecuacion, 
    Mostrar, ResolverSistema, Inicio, Fin, If, Else, While, For, Igual, Suma,
     Resta, Multiplicacion, Op_logico, Op_incremento,
    Op_relacional, Op_booleano, Concatenacion, Identificador, Numero, ERROR;

non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE,  FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, LISTA_NUMEROS, ECUACION, EXPRESION, TERMINO,
    OPERACION, RESOLVER, EXPRESION_MENSAJES,
    LISTA_ECUACIONES,LISTA_IDENTIFICADORES, SENTENCIA_SIMPLE, MOSTRAR, MENSAJE;

precedence left Suma, Resta;
precedence left Multiplicacion;
start with INICIO;

INICIO ::= 
    Inicio  Llave_a Linea SENTENCIA Llave_c Fin |
    Inicio Llave_a Linea SENTENCIA Llave_c error{: 
           Errores.add("Se esperaba Fin despues de } \n"); 
         :} |
    Inicio error Linea SENTENCIA Llave_c Fin{: 
            Errores.add("Se esperaba { despues de Inicio \n");
          :}|
     Inicio Llave_a Linea error Fin{: 
            Errores.add("Se esperaba } despues de la sentencia \n");
          :}  
 ;


SENTENCIA  ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA FOR |
    FOR |
    SENTENCIA_SIMPLE |
    MOSTRAR |
    error Linea{: 
           Errores.add("Sentencia incorrecta \n");
         :}
;
DECLARACION ::= 
    Num Identificador Linea | 
    Num Identificador error Linea{: 
           Errores.add("Acabado incorrecto de declaracion \n");
         :}| 
    
    Num Identificador Igual Corchete_a LISTA_NUMEROS Corchete_c Linea|
    Num error Igual Corchete_a LISTA_NUMEROS Corchete_c Linea{: 
           Errores.add("Se esperaba identificador despues de Num \n");
         :}|
    Num Identificador error Corchete_a LISTA_NUMEROS Corchete_c Linea{: 
           Errores.add("Se esperaba = despues de identificador \n");
         :}|
   Num Identificador Igual error LISTA_NUMEROS Corchete_c Linea{: 
           Errores.add("Se esperaba [ despues de = \n");
         :}|    
    Num Identificador Igual Corchete_a LISTA_NUMEROS Corchete_c error Linea{: 
           Errores.add("Acabado incorrecto de declaracion \n");
         :}|
    Num Identificador Igual Corchete_a LISTA_NUMEROS Linea {: 
           Errores.add("ERROR:No hubo cierre de corchete \n");
         :}|

    Num Identificador Igual OPERACION Linea |
    Num error Igual OPERACION Linea {: 
           Errores.add("Se esperaba Identificador despues de Num \n");
         :}|
    Num Identificador error OPERACION Linea {: 
           Errores.add("Se esperaba = despues de Identificador \n");
         :}|
    Num Identificador Igual OPERACION error Linea {: 
           Errores.add("Acabado incorrecto de declaracion\n");
         :}|

    Bool Identificador Linea |
    Bool Identificador error Linea{: 
           Errores.add("Acabado incorrecto de declaracion \n");
         :}|
    
     Bool Identificador Igual Op_booleano Linea|
     Bool error Igual Op_booleano Linea {: 
           Errores.add("Se esperaba un identificador despues de Bool\n");
         :} |
    Bool Identificador error Op_booleano Linea {: 
           Errores.add("Se esperaba un = despues de Identificador\n");
         :} |
    Bool Identificador Igual error Linea {: 
           Errores.add("Se esperaba un Operador booleano despues de = \n");
         :} |
    Bool Identificador Igual Op_booleano error Linea {: 
           Errores.add("Acabado incorrecto de declaracion \n");
         :} |
    
    Cadena Identificador Linea|
    Cadena Identificador error Linea {: 
           Errores.add("Acabado incorrecto de declaracion \n");
         :} |

    Cadena Identificador Igual Comillas Comillas Linea |
    Cadena error Igual Comillas Comillas Linea {: 
           Errores.add("Se esperaba identificador despues de Cadena \n");
         :} |
    Cadena Identificador error Comillas Comillas Linea {: 
           Errores.add("Se esperaba = despues de Identificador \n");
         :} |
    Cadena Identificador Igual error Comillas Linea {: 
           Errores.add("Se esperaba Comillas despues de = \n");
         :} |
    Cadena Identificador Igual Comillas error Linea{: 
           Errores.add("Se esperaba Comillas despues de Comillas \n");
         :} |
    Cadena Identificador Igual Comillas Comillas error Linea{: 
           Errores.add("Acabado incorrecto de declaracion \n");
         :} |

    Cadena Identificador Igual Comillas Identificador Comillas Linea|
    Cadena error Igual Comillas Identificador Comillas Linea{: 
           Errores.add("Se esperaba Identificador despues de Cadena \n");
         :} |
    Cadena Identificador error Comillas Identificador Comillas Linea{: 
           Errores.add("Se esperaba = despues de Identificador \n");
         :} |
    Cadena Identificador Igual error Identificador Comillas Linea{: 
           Errores.add("Se esperaba Comillas despues de = \n");
         :} |
    Cadena Identificador Igual Comillas Identificador error Linea{: 
           Errores.add("Se esperaba Comillas despues de identificador \n");
         :} |
    Cadena Identificador Igual Comillas Identificador Comillas error Linea{: 
           Errores.add("Acabado incorrecto de declaracion \n");
         :} |

     Cadena Identificador Igual RESOLVER Linea |
      Cadena error Igual RESOLVER Linea {: 
           Errores.add("Se esperaba Identificador despues de Cadena \n");
         :} |
    Cadena Identificador error RESOLVER Linea {: 
           Errores.add("Se esperaba = despues de Identificador \n");
         :} |
    Cadena Identificador Igual RESOLVER error Linea {: 
           Errores.add("Acabado incorrecto de declaracion \n");
         :} |

    Cadena Identificador Igual ECUACION Linea |
    Cadena error Igual ECUACION Linea {: 
           Errores.add("Se esperaba Identificador despues de Cadena \n");
         :} |
    Cadena Identificador error ECUACION Linea {: 
           Errores.add("Se esperaba = despues de Identificador \n");
         :} |
    Cadena Identificador Igual ECUACION error Linea {: 
           Errores.add("Acabado incorrecto de declaracion \n");
         :} 
    
;


LISTA_NUMEROS ::= OPERACION|
                  OPERACION Coma LISTA_NUMEROS 
;


ECUACION::=
       Ecuacion Parentesis_a EXPRESION Igual Numero Parentesis_c |
    Ecuacion error EXPRESION Igual Numero Parentesis_c {: 
           Errores.add("Se esperaba ( despues de Ecuacion \n");
         :} |
    Ecuacion Parentesis_a EXPRESION Igual error Parentesis_c{: 
           Errores.add("Se esperaba un número despues de Igual \n");
         :} |
    Ecuacion Parentesis_a EXPRESION Igual Numero error{: 
           Errores.add("Se esperaba ( despues de Numero \n");
         :} 
;


EXPRESION ::= EXPRESION Suma Numero Identificador|
              EXPRESION Resta Numero Identificador|
              Numero Identificador
;
TERMINO ::= Numero|
            Identificador
;

OPERACION ::=
    OPERACION Suma OPERACION |
    OPERACION Suma error {: 
           Errores.add("Se espera una operacion al final \n");
         :} |
    OPERACION Resta OPERACION |
    OPERACION Resta error {: 
           Errores.add("Se espera una operacion al final \n");
         :}|
    OPERACION Multiplicacion OPERACION |
    OPERACION Multiplicacion error {: 
           Errores.add("Se espera una operacion al final \n");
         :}|
    Parentesis_a OPERACION Parentesis_c |
    Parentesis_a OPERACION error{: 
           Errores.add("Se espera un parentesis al final \n");
         :}|
    Parentesis_a error Parentesis_c{: 
           Errores.add("Se espera una operacion entre los parentesis \n");
         :}|
    Llave_a OPERACION Llave_c |
    Llave_a OPERACION error {: 
           Errores.add("Se espera una llave al final \n");
         :}|
    Llave_a error Llave_c {: 
           Errores.add("Se espera una operacion entre las llaves \n");
         :}|
    TERMINO
;



IF ::= 
    If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea|
    If Parentesis_a error Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea {: 
           Errores.add("Se espera una condicion entre los parentesis \n");
         :}|
    If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c error Linea SENTENCIA Llave_c Linea {: 
           Errores.add("Se espera una llave despues del ultimo parentesis \n");
         :}|
    If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea error Llave_c Linea {: 
           Errores.add("Se espera una sentencia entre las llaves \n");
         :}
    

;

SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas
;

IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Else Llave_a Linea SENTENCIA Llave_c Linea
;
WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea
;


FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Linea SENTENCIA Llave_c Linea
;
SENTENCIA_FOR ::=
    Num Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador Op_incremento | 
    Op_incremento Identificador
;

RESOLVER::=
    ResolverSistema Parentesis_a LISTA_ECUACIONES Parentesis_c |
    ResolverSistema Parentesis_a LISTA_IDENTIFICADORES Parentesis_c
;

LISTA_ECUACIONES::=
    ECUACION |
    ECUACION Coma LISTA_ECUACIONES
;

LISTA_IDENTIFICADORES::=
    Identificador |
    Identificador Coma LISTA_IDENTIFICADORES
;

SENTENCIA_SIMPLE::=
    Identificador Igual Corchete_a LISTA_NUMEROS Corchete_c Linea|
    Identificador Corchete_a OPERACION Corchete_c Igual Numero Linea|
    Identificador Igual OPERACION Linea |

    Identificador Igual Op_booleano Linea|

    Identificador Igual Comillas Comillas  Linea|
    Identificador Igual Comillas Identificador Comillas Linea |

    Identificador Igual ECUACION Linea |

    Identificador Igual RESOLVER Linea|
    Identificador Op_relacional Linea
;

MOSTRAR::=
    Mostrar Parentesis_a MENSAJE Parentesis_c Linea|
    Mostrar Parentesis_a OPERACION Parentesis_c Linea 
;

MENSAJE ::=
    Comillas Identificador Comillas |
    Comillas Identificador error {: 
           Errores.add("True \n");
         :} |
    Comillas Identificador Comillas Concatenacion EXPRESION_MENSAJES|   
    Identificador Concatenacion EXPRESION_MENSAJES
;

EXPRESION_MENSAJES::=
    OPERACION |
    MENSAJE

;




